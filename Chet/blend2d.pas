unit blend2d;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}

interface

const
  {$IF Defined(WIN32)}
  _LIB_BLEND2D = 'blend2d_win32.dll';
  _PU = '';
  {$ELSE}
    {$MESSAGE Error 'Unsupported platform'}
  {$ENDIF}

const
  { TODO : Unable to convert function-like macro: }
  (* _BL_MAKE_VERSION ( _MAJOR , _MINOR , _PATCH ) ( ( ( _MAJOR ) << 16 ) | ( ( _MINOR ) << 8 ) | ( _PATCH ) ) *)
  { TODO : Macro uses commented-out symbol "_BL_MAKE_VERSION": }
  (* _BL_VERSION _BL_MAKE_VERSION ( 0 , 12 , 0 ) *)
  _BL_BYTE_ORDER = 1234;
  { TODO : Macro refers to system symbol "__declspec": }
  (* _BL_API __declspec ( _dllimport ) *)
  { TODO : Macro refers to system symbol "__cdecl": }
  (* _BL_CDECL __cdecl *)
  { TODO : Macro refers to system symbol "__forceinline": }
  (* _BL_INLINE __forceinline *)
  { TODO : Macro probably uses invalid symbol "inline": }
  (* _BL_INLINE_NODEBUG inline __attribute__ ( ( ___always_inline__ , ___nodebug__ ) ) *)
  { TODO : Macro refers to system symbol "__declspec": }
  (* _BL_NORETURN __declspec ( _noreturn ) *)
  { TODO : Macro refers to system symbol "__attribute__": }
  (* _BL_NODISCARD __attribute__ ( ( ___warn_unused_result__ ) ) *)
  { TODO : Macro refers to system symbol "__attribute__": }
  (* _BL_PURE __attribute__ ( ( ___pure__ ) ) *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_ALIGN_TYPE ( _TYPE , _ALIGNMENT ) __declspec ( _align ( _ALIGNMENT ) ) _TYPE *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_ASSUME ( ... ) ___builtin_assume ( ___VA_ARGS__ ) *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_LIKELY ( ... ) ( ___VA_ARGS__ ) *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_UNLIKELY ( ... ) ( ___VA_ARGS__ ) *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_ASSERT ( _EXP ) do { if ( _BL_UNLIKELY ( ! ( _EXP ) ) ) _blRuntimeAssertionFailure ( ___FILE__ , ___LINE__ , # _EXP ) ; } while ( 0 ) *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_PROPAGATE ( ... ) do { _BLResult _resultToPropagate = ( ___VA_ARGS__ ) ; if ( _BL_UNLIKELY ( _resultToPropagate ) ) return _resultToPropagate ; } while ( 0 ) *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_MAKE_TAG ( _A , _B , _C , _D ) ( ( _BLTag ) ( ( ( _BLTag ) ( _A ) << 24 ) | ( ( _BLTag ) ( _B ) << 16 ) | ( ( _BLTag ) ( _C ) << 8 ) | ( ( _BLTag ) ( _D ) ) ) ) *)
  { TODO : Macro probably uses invalid symbol "static": }
  (* _BL_DEFINE_CONST static const *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_DEFINE_ENUM ( _NAME ) typedef enum _NAME _NAME ; enum _NAME *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_FORCE_ENUM_UINT32 ( _ENUM_VALUE_PREFIX ) , _ENUM_VALUE_PREFIX ## __FORCE_UINT = 0xFFFFFFFFu *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_DIAGNOSTIC_PUSH ( ... ) __Pragma ( "clang diagnostic push" ) ___VA_ARGS__ *)
  { TODO : Macro refers to system symbol "__Pragma": }
  (* _BL_DIAGNOSTIC_POP __Pragma ( "clang diagnostic pop" ) *)
  { TODO : Macro refers to system symbol "__Pragma": }
  (* _BL_DIAGNOSTIC_NO_UNUSED_FUNCTIONS __Pragma ( "clang diagnostic ignored \"-Wunused-function\"" ) *)
  { TODO : Macro refers to system symbol "__Pragma": }
  (* _BL_DIAGNOSTIC_NO_UNUSED_PARAMETERS __Pragma ( "clang diagnostic ignored \"-Wunused-parameter\"" ) *)
  { TODO : Macro refers to system symbol "__Pragma": }
  (* _BL_DIAGNOSTIC_NO_EXTRA_WARNINGS __Pragma ( "clang diagnostic ignored \"-Wextra\"" ) *)
  { TODO : Macro probably uses invalid symbol "typedef": }
  (* _BL_FORWARD_DECLARE_STRUCT ( _NAME ) typedef struct _NAME _NAME *)
  { TODO : Macro probably uses invalid symbol "typedef": }
  (* _BL_FORWARD_DECLARE_UNION ( _NAME ) typedef union _NAME _NAME *)
  { TODO : Macro probably uses invalid symbol "typedef": }
  (* _BL_FORWARD_DECLARE_ENUM ( _NAME ) typedef enum _NAME _NAME *)
  { TODO : Unable to convert macro: }
  (* _BL_DEFINE_ARRAY_VIEW ( _NAME , _TYPE ) typedef struct { const _TYPE * _data ; _size_t _size ; } _NAME *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_CLASS_INHERITS ( _BASE ) *)
  { TODO : Macro refers to system symbol "__d": }
  (* _BL_DEFINE_OBJECT_DETAIL _BLObjectDetail __d ; *)
  { TODO : Unable to convert function-like macro: }
  (* _BL_DEFINE_OBJECT_DCAST ( _TO ) *)
  _BL_DEFINE_VIRT_BASE = _BLObjectVirtBase_base;;

type
  //! \ingroup bl_globals
  //!
  //! Blend2D result code.
  _BLResultCode = Integer;
  _PBLResultCode = ^_BLResultCode;

const
  //! Successful result code.
  _BL_SUCCESS = 0;
  //! Successful result code.
  _BL_ERROR_START_INDEX = 65536;
  //! Out of memory                 [ENOMEM].
  _BL_ERROR_OUT_OF_MEMORY = 65536;
  //! Invalid value/argument        [EINVAL].
  _BL_ERROR_INVALID_VALUE = 65537;
  //! Invalid state                 [EFAULT].
  _BL_ERROR_INVALID_STATE = 65538;
  //! Invalid handle or file.       [EBADF].
  _BL_ERROR_INVALID_HANDLE = 65539;
  //! Invalid conversion.
  _BL_ERROR_INVALID_CONVERSION = 65540;
  //! Overflow or value too large   [EOVERFLOW].
  _BL_ERROR_OVERFLOW = 65541;
  //! Object not initialized.
  _BL_ERROR_NOT_INITIALIZED = 65542;
  //! Not implemented               [ENOSYS].
  _BL_ERROR_NOT_IMPLEMENTED = 65543;
  //! Operation not permitted       [EPERM].
  _BL_ERROR_NOT_PERMITTED = 65544;
  //! IO error                      [EIO].
  _BL_ERROR_IO = 65545;
  //! Device or resource busy       [EBUSY].
  _BL_ERROR_BUSY = 65546;
  //! Operation interrupted         [EINTR].
  _BL_ERROR_INTERRUPTED = 65547;
  //! Try again                     [EAGAIN].
  _BL_ERROR_TRY_AGAIN = 65548;
  //! Timed out                     [ETIMEDOUT].
  _BL_ERROR_TIMED_OUT = 65549;
  //! Broken pipe                   [EPIPE].
  _BL_ERROR_BROKEN_PIPE = 65550;
  //! File is not seekable          [ESPIPE].
  _BL_ERROR_INVALID_SEEK = 65551;
  //! Too many levels of symlinks   [ELOOP].
  _BL_ERROR_SYMLINK_LOOP = 65552;
  //! File is too large             [EFBIG].
  _BL_ERROR_FILE_TOO_LARGE = 65553;
  //! File/directory already exists [EEXIST].
  _BL_ERROR_ALREADY_EXISTS = 65554;
  //! Access denied                 [EACCES].
  _BL_ERROR_ACCESS_DENIED = 65555;
  //! Media changed                 [Windows::ERROR_MEDIA_CHANGED].
  _BL_ERROR_MEDIA_CHANGED = 65556;
  //! The file/FS is read-only      [EROFS].
  _BL_ERROR_READ_ONLY_FS = 65557;
  //! Device doesn't exist          [ENXIO].
  _BL_ERROR_NO_DEVICE = 65558;
  //! Not found, no entry (fs)      [ENOENT].
  _BL_ERROR_NO_ENTRY = 65559;
  //! No media in drive/device      [ENOMEDIUM].
  _BL_ERROR_NO_MEDIA = 65560;
  //! No more data / end of file    [ENODATA].
  _BL_ERROR_NO_MORE_DATA = 65561;
  //! No more files                 [ENMFILE].
  _BL_ERROR_NO_MORE_FILES = 65562;
  //! No space left on device       [ENOSPC].
  _BL_ERROR_NO_SPACE_LEFT = 65563;
  //! Directory is not empty        [ENOTEMPTY].
  _BL_ERROR_NOT_EMPTY = 65564;
  //! Not a file                    [EISDIR].
  _BL_ERROR_NOT_FILE = 65565;
  //! Not a directory               [ENOTDIR].
  _BL_ERROR_NOT_DIRECTORY = 65566;
  //! Not same device               [EXDEV].
  _BL_ERROR_NOT_SAME_DEVICE = 65567;
  //! Not a block device            [ENOTBLK].
  _BL_ERROR_NOT_BLOCK_DEVICE = 65568;
  //! File/path name is invalid     [n/a].
  _BL_ERROR_INVALID_FILE_NAME = 65569;
  //! File/path name is too long    [ENAMETOOLONG].
  _BL_ERROR_FILE_NAME_TOO_LONG = 65570;
  //! Too many open files           [EMFILE].
  _BL_ERROR_TOO_MANY_OPEN_FILES = 65571;
  //! Too many open files by OS     [ENFILE].
  _BL_ERROR_TOO_MANY_OPEN_FILES_BY_OS = 65572;
  //! Too many symbolic links on FS [EMLINK].
  _BL_ERROR_TOO_MANY_LINKS = 65573;
  //! Too many threads              [EAGAIN].
  _BL_ERROR_TOO_MANY_THREADS = 65574;
  //! Thread pool is exhausted and couldn't acquire the requested thread count.
  _BL_ERROR_THREAD_POOL_EXHAUSTED = 65575;
  //! File is empty (not specific to any OS error).
  _BL_ERROR_FILE_EMPTY = 65576;
  //! File open failed              [Windows::ERROR_OPEN_FAILED].
  _BL_ERROR_OPEN_FAILED = 65577;
  //! Not a root device/directory   [Windows::ERROR_DIR_NOT_ROOT].
  _BL_ERROR_NOT_ROOT_DEVICE = 65578;
  //! Unknown system error that failed to translate to Blend2D result code.
  _BL_ERROR_UNKNOWN_SYSTEM_ERROR = 65579;
  //! Invalid data alignment.
  _BL_ERROR_INVALID_ALIGNMENT = 65580;
  //! Invalid data signature or header.
  _BL_ERROR_INVALID_SIGNATURE = 65581;
  //! Invalid or corrupted data.
  _BL_ERROR_INVALID_DATA = 65582;
  //! Invalid string (invalid data of either UTF8, UTF16, or UTF32).
  _BL_ERROR_INVALID_STRING = 65583;
  //! Invalid key or property.
  _BL_ERROR_INVALID_KEY = 65584;
  //! Truncated data (more data required than memory/stream provides).
  _BL_ERROR_DATA_TRUNCATED = 65585;
  //! Input data too large to be processed.
  _BL_ERROR_DATA_TOO_LARGE = 65586;
  //! Decompression failed due to invalid data (RLE, Huffman, etc).
  _BL_ERROR_DECOMPRESSION_FAILED = 65587;
  //! Invalid geometry (invalid path data or shape).
  _BL_ERROR_INVALID_GEOMETRY = 65588;
  //! Returned when there is no matching vertex in path data.
  _BL_ERROR_NO_MATCHING_VERTEX = 65589;
  //! Invalid create flags (BLContext).
  _BL_ERROR_INVALID_CREATE_FLAGS = 65590;
  //! No matching cookie (BLContext).
  _BL_ERROR_NO_MATCHING_COOKIE = 65591;
  //! No states to restore (BLContext).
  _BL_ERROR_NO_STATES_TO_RESTORE = 65592;
  //! Cannot save state as the number of saved states reached the limit (BLContext).
  _BL_ERROR_TOO_MANY_SAVED_STATES = 65593;
  //! The size of the image is too large.
  _BL_ERROR_IMAGE_TOO_LARGE = 65594;
  //! Image codec for a required format doesn't exist.
  _BL_ERROR_IMAGE_NO_MATCHING_CODEC = 65595;
  //! Unknown or invalid file format that cannot be read.
  _BL_ERROR_IMAGE_UNKNOWN_FILE_FORMAT = 65596;
  //! Image codec doesn't support reading the file format.
  _BL_ERROR_IMAGE_DECODER_NOT_PROVIDED = 65597;
  //! Image codec doesn't support writing the file format.
  _BL_ERROR_IMAGE_ENCODER_NOT_PROVIDED = 65598;
  //! Multiple IHDR chunks are not allowed (PNG).
  _BL_ERROR_PNG_MULTIPLE_IHDR = 65599;
  //! Invalid IDAT chunk (PNG).
  _BL_ERROR_PNG_INVALID_IDAT = 65600;
  //! Invalid IEND chunk (PNG).
  _BL_ERROR_PNG_INVALID_IEND = 65601;
  //! Invalid PLTE chunk (PNG).
  _BL_ERROR_PNG_INVALID_PLTE = 65602;
  //! Invalid tRNS chunk (PNG).
  _BL_ERROR_PNG_INVALID_TRNS = 65603;
  //! Invalid filter type (PNG).
  _BL_ERROR_PNG_INVALID_FILTER = 65604;
  //! Unsupported feature (JPEG).
  _BL_ERROR_JPEG_UNSUPPORTED_FEATURE = 65605;
  //! Invalid SOS marker or header (JPEG).
  _BL_ERROR_JPEG_INVALID_SOS = 65606;
  //! Invalid SOF marker (JPEG).
  _BL_ERROR_JPEG_INVALID_SOF = 65607;
  //! Multiple SOF markers (JPEG).
  _BL_ERROR_JPEG_MULTIPLE_SOF = 65608;
  //! Unsupported SOF marker (JPEG).
  _BL_ERROR_JPEG_UNSUPPORTED_SOF = 65609;
  //! Font doesn't have any data as it's not initialized.
  _BL_ERROR_FONT_NOT_INITIALIZED = 65610;
  //! Font or font face was not matched (BLFontManager).
  _BL_ERROR_FONT_NO_MATCH = 65611;
  //! Font has no character to glyph mapping data.
  _BL_ERROR_FONT_NO_CHARACTER_MAPPING = 65612;
  //! Font has missing an important table.
  _BL_ERROR_FONT_MISSING_IMPORTANT_TABLE = 65613;
  //! Font feature is not available.
  _BL_ERROR_FONT_FEATURE_NOT_AVAILABLE = 65614;
  //! Font has an invalid CFF data.
  _BL_ERROR_FONT_CFF_INVALID_DATA = 65615;
  //! Font program terminated because the execution reached the limit.
  _BL_ERROR_FONT_PROGRAM_TERMINATED = 65616;
  //! Glyph substitution requires too much space and was terminated.
  _BL_ERROR_GLYPH_SUBSTITUTION_TOO_LARGE = 65617;
  //! Invalid glyph identifier.
  _BL_ERROR_INVALID_GLYPH = 65618;
  _BL_ERROR_FORCE_UINT = -1;

//! \ingroup bl_globals
//!
//! Byte order.
type
  _BLByteOrder = Integer;
  _PBLByteOrder = ^_BLByteOrder;

const
  //! Little endian byte-order.
  _BL_BYTE_ORDER_LE = 0;
  //! Big endian byte-order.
  _BL_BYTE_ORDER_BE = 1;
  //! Native (host) byte-order.
  _BL_BYTE_ORDER_NATIVE = 0;
  //! Swapped byte-order (BE if host is LE and vice versa).
  _BL_BYTE_ORDER_SWAPPED = 1;
  _BL_BYTE_ORDER_FORCE_UINT = -1;

//! \ingroup bl_globals
//!
//! Data access flags.
type
  _BLDataAccessFlags = Integer;
  _PBLDataAccessFlags = ^_BLDataAccessFlags;

const
  //! No data access flags.
  _BL_DATA_ACCESS_NO_FLAGS = 0;
  //! Read access.
  _BL_DATA_ACCESS_READ = 1;
  //! Write access.
  _BL_DATA_ACCESS_WRITE = 2;
  //! Read and write access.
  _BL_DATA_ACCESS_RW = 3;
  _BL_DATA_ACCESS_FORCE_UINT = -1;

//! \ingroup bl_globals
//!
//! Data source type.
type
  _BLDataSourceType = Integer;
  _PBLDataSourceType = ^_BLDataSourceType;

const
  //! No data source.
  _BL_DATA_SOURCE_TYPE_NONE = 0;
  //! Memory data source.
  _BL_DATA_SOURCE_TYPE_MEMORY = 1;
  //! File data source.
  _BL_DATA_SOURCE_TYPE_FILE = 2;
  //! Custom data source.
  _BL_DATA_SOURCE_TYPE_CUSTOM = 3;
  //! Maximum value `BLDataSourceType`.
  _BL_DATA_SOURCE_TYPE_MAX_VALUE = 3;
  _BL_DATA_SOURCE_TYPE_FORCE_UINT = -1;

//! \ingroup bl_globals
//!
//! Modification operation applied to Blend2D containers.
type
  _BLModifyOp = Integer;
  _PBLModifyOp = ^_BLModifyOp;

const
  //! Assign operation, which reserves space only to fit the requested input.
  _BL_MODIFY_OP_ASSIGN_FIT = 0;
  //! Assign operation, which takes into consideration successive appends.
  _BL_MODIFY_OP_ASSIGN_GROW = 1;
  //! Append operation, which reserves space only to fit the current and appended content.
  _BL_MODIFY_OP_APPEND_FIT = 2;
  //! Append operation, which takes into consideration successive appends.
  _BL_MODIFY_OP_APPEND_GROW = 3;
  //! Maximum value of `BLModifyOp`.
  _BL_MODIFY_OP_MAX_VALUE = 3;
  _BL_MODIFY_OP_FORCE_UINT = -1;

//! \ingroup bl_globals
//!
//! Boolean operator.
type
  _BLBooleanOp = Integer;
  _PBLBooleanOp = ^_BLBooleanOp;

const
  //! Result = B.
  _BL_BOOLEAN_OP_COPY = 0;
  //! Result = A & B.
  _BL_BOOLEAN_OP_AND = 1;
  //! Result = A | B.
  _BL_BOOLEAN_OP_OR = 2;
  //! Result = A ^ B.
  _BL_BOOLEAN_OP_XOR = 3;
  //! Result = A & ~B.
  _BL_BOOLEAN_OP_AND_NOT = 4;
  //! Result = ~A & B.
  _BL_BOOLEAN_OP_NOT_AND = 5;
  //! Maximum value of `BLBooleanOp`.
  _BL_BOOLEAN_OP_MAX_VALUE = 5;
  _BL_BOOLEAN_OP_FORCE_UINT = -1;

//! \ingroup bl_styling
//!
//! Extend mode.
type
  _BLExtendMode = Integer;
  _PBLExtendMode = ^_BLExtendMode;

const
  //! Pad extend [default].
  _BL_EXTEND_MODE_PAD = 0;
  //! Repeat extend.
  _BL_EXTEND_MODE_REPEAT = 1;
  //! Reflect extend.
  _BL_EXTEND_MODE_REFLECT = 2;
  //! Alias of `BL_EXTEND_MODE_PAD`.
  _BL_EXTEND_MODE_PAD_X_PAD_Y = 0;
  //! Pad X and repeat Y.
  _BL_EXTEND_MODE_PAD_X_REPEAT_Y = 3;
  //! Pad X and reflect Y.
  _BL_EXTEND_MODE_PAD_X_REFLECT_Y = 4;
  //! Alias of `BL_EXTEND_MODE_REPEAT`.
  _BL_EXTEND_MODE_REPEAT_X_REPEAT_Y = 1;
  //! Repeat X and pad Y.
  _BL_EXTEND_MODE_REPEAT_X_PAD_Y = 5;
  //! Repeat X and reflect Y.
  _BL_EXTEND_MODE_REPEAT_X_REFLECT_Y = 6;
  //! Alias of `BL_EXTEND_MODE_REFLECT`.
  _BL_EXTEND_MODE_REFLECT_X_REFLECT_Y = 2;
  //! Reflect X and pad Y.
  _BL_EXTEND_MODE_REFLECT_X_PAD_Y = 7;
  //! Reflect X and repeat Y.
  _BL_EXTEND_MODE_REFLECT_X_REPEAT_Y = 8;
  //! Count of simple extend modes (that use the same value for X and Y).
  _BL_EXTEND_MODE_SIMPLE_MAX_VALUE = 2;
  //! Count of complex extend modes (that can use independent values for X and Y).
  _BL_EXTEND_MODE_COMPLEX_MAX_VALUE = 8;
  //! Maximum value of `BLExtendMode`.
  _BL_EXTEND_MODE_MAX_VALUE = 8;
  _BL_EXTEND_MODE_FORCE_UINT = -1;

//! \ingroup bl_text
//!
//! Text encoding.
type
  _BLTextEncoding = Integer;
  _PBLTextEncoding = ^_BLTextEncoding;

const
  //! UTF-8 encoding.
  _BL_TEXT_ENCODING_UTF8 = 0;
  //! UTF-16 encoding (native endian).
  _BL_TEXT_ENCODING_UTF16 = 1;
  //! UTF-32 encoding (native endian).
  _BL_TEXT_ENCODING_UTF32 = 2;
  //! LATIN1 encoding (one byte per character).
  _BL_TEXT_ENCODING_LATIN1 = 3;
  //! Platform native `wchar_t` (or Windows `WCHAR`) encoding, alias to
    //! either UTF-32, UTF-16, or UTF-8 depending on `sizeof(wchar_t)`.
  _BL_TEXT_ENCODING_WCHAR = 1;
  //! Maximum value of `BLTextEncoding`.
  _BL_TEXT_ENCODING_MAX_VALUE = 3;
  _BL_TEXT_ENCODING_FORCE_UINT = -1;

//! \cond INTERNAL
//! Defines a start offset of each field or flag in object info - the shift can be then used to get/set value from/to
//! info bits.
type
  _BLObjectInfoShift = Integer;
  _PBLObjectInfoShift = ^_BLObjectInfoShift;

const
  _BL_OBJECT_INFO_P_SHIFT = 0;
  _BL_OBJECT_INFO_Q_SHIFT = 8;
  _BL_OBJECT_INFO_C_SHIFT = 8;
  _BL_OBJECT_INFO_B_SHIFT = 12;
  _BL_OBJECT_INFO_A_SHIFT = 16;
  _BL_OBJECT_INFO_TYPE_SHIFT = 22;
  _BL_OBJECT_INFO_R_SHIFT = 29;
  _BL_OBJECT_INFO_D_SHIFT = 30;
  _BL_OBJECT_INFO_M_SHIFT = 31;
  _BL_OBJECT_INFO_SHIFT_FORCE_UINT = -1;

//! Defines a mask of each field of the object info.
//!
//! \note This is part of the official documentation, however, users should not use these enumerations in any context.
type
  _BLObjectInfoBits = Integer;
  _PBLObjectInfoBits = ^_BLObjectInfoBits;

const
  //! Mask describing 'P' payload (8 bits).
  _BL_OBJECT_INFO_P_MASK = 255;
  //! Mask describing 'Q' payload (8 bits aliased with 'bbbbcccc' bits).
  _BL_OBJECT_INFO_Q_MASK = 65280;
  //! Mask describing 'C' payload (4 bits).
  _BL_OBJECT_INFO_C_MASK = 3840;
  //! Mask describing 'B' payload (4 bits).
  _BL_OBJECT_INFO_B_MASK = 61440;
  //! Mask describing 'A' payload (6 bits).
  _BL_OBJECT_INFO_A_MASK = 4128768;
  //! Mask of all payload fields combined, except 'M', 'T', type identification, and 'R' (RefCounted marker).
  _BL_OBJECT_INFO_FIELDS_MASK = 4194303;
  //! Mask describing object type (8 bits), see \ref BLObjectType.
  _BL_OBJECT_INFO_TYPE_MASK = 532676608;
  //! Flag describing a ref-counted object (if set together with 'D' flag)
    //!
    //! \note This flag is free for use by SSO, it has no meaning when 'D' flag is not set).
  _BL_OBJECT_INFO_R_FLAG = 536870912;
  //! Flag describing a dynamic object - if this flag is not set, it means the object is in SSO mode.
  _BL_OBJECT_INFO_D_FLAG = 1073741824;
  //! Flag describing a valid object compatible with \ref BLObjectCore interface (otherwise it's most likely \ref BLRgba).
  _BL_OBJECT_INFO_M_FLAG = -2147483648;
  //! A combination of `BL_OBJECT_INFO_M_FLAG` and `BL_OBJECT_INFO_D_FLAG` flags.
  _BL_OBJECT_INFO_MD_FLAGS = -1073741824;
  //! A combination of `BL_OBJECT_INFO_M_FLAG`, `BL_OBJECT_INFO_D_FLAG`, `BL_OBJECT_INFO_R_FLAG` flags.
  _BL_OBJECT_INFO_MDR_FLAGS = -536870912;
  _BL_OBJECT_INFO_BITS_FORCE_UINT = -1;

//! Object type identifier.
type
  _BLObjectType = Integer;
  _PBLObjectType = ^_BLObjectType;

const
  //! Object represents a \ref BLRgba value stored as four 32-bit floating point components (can be used as Style).
  _BL_OBJECT_TYPE_RGBA = 0;
  //! Object represents a \ref BLRgba32 value stored as 32-bit integer in `0xAARRGGBB` form.
  _BL_OBJECT_TYPE_RGBA32 = 1;
  //! Object represents a \ref BLRgba64 value stored as 64-bit integer in `0xAAAARRRRGGGGBBBB` form.
  _BL_OBJECT_TYPE_RGBA64 = 2;
  //! Object is `Null` (can be used as style).
  _BL_OBJECT_TYPE_NULL = 3;
  //! Object is \ref BLPattern (can be used as style).
  _BL_OBJECT_TYPE_PATTERN = 4;
  //! Object is \ref BLGradient (can be used as style).
  _BL_OBJECT_TYPE_GRADIENT = 5;
  //! Object is \ref BLImage.
  _BL_OBJECT_TYPE_IMAGE = 9;
  //! Object is \ref BLPath.
  _BL_OBJECT_TYPE_PATH = 10;
  //! Object is \ref BLFont.
  _BL_OBJECT_TYPE_FONT = 16;
  //! Object is \ref BLFontFeatureSettings.
  _BL_OBJECT_TYPE_FONT_FEATURE_SETTINGS = 17;
  //! Object is \ref BLFontVariationSettings.
  _BL_OBJECT_TYPE_FONT_VARIATION_SETTINGS = 18;
  //! Object is \ref BLBitArray.
  _BL_OBJECT_TYPE_BIT_ARRAY = 25;
  //! Object is \ref BLBitSet.
  _BL_OBJECT_TYPE_BIT_SET = 26;
  //! Object represents a boolean value.
  _BL_OBJECT_TYPE_BOOL = 28;
  //! Object represents a 64-bit signed integer value.
  _BL_OBJECT_TYPE_INT64 = 29;
  //! Object represents a 64-bit unsigned integer value.
  _BL_OBJECT_TYPE_UINT64 = 30;
  //! Object represents a 64-bit floating point value.
  _BL_OBJECT_TYPE_DOUBLE = 31;
  //! Object is \ref BLString.
  _BL_OBJECT_TYPE_STRING = 32;
  //! Object is \ref BLArray<T> where `T` is a `BLObject` compatible type.
  _BL_OBJECT_TYPE_ARRAY_OBJECT = 33;
  //! Object is \ref BLArray<T> where `T` matches 8-bit signed integral type.
  _BL_OBJECT_TYPE_ARRAY_INT8 = 34;
  //! Object is \ref BLArray<T> where `T` matches 8-bit unsigned integral type.
  _BL_OBJECT_TYPE_ARRAY_UINT8 = 35;
  //! Object is \ref BLArray<T> where `T` matches 16-bit signed integral type.
  _BL_OBJECT_TYPE_ARRAY_INT16 = 36;
  //! Object is \ref BLArray<T> where `T` matches 16-bit unsigned integral type.
  _BL_OBJECT_TYPE_ARRAY_UINT16 = 37;
  //! Object is \ref BLArray<T> where `T` matches 32-bit signed integral type.
  _BL_OBJECT_TYPE_ARRAY_INT32 = 38;
  //! Object is \ref BLArray<T> where `T` matches 32-bit unsigned integral type.
  _BL_OBJECT_TYPE_ARRAY_UINT32 = 39;
  //! Object is \ref BLArray<T> where `T` matches 64-bit signed integral type.
  _BL_OBJECT_TYPE_ARRAY_INT64 = 40;
  //! Object is \ref BLArray<T> where `T` matches 64-bit unsigned integral type.
  _BL_OBJECT_TYPE_ARRAY_UINT64 = 41;
  //! Object is \ref BLArray<T> where `T` matches 32-bit floating point type.
  _BL_OBJECT_TYPE_ARRAY_FLOAT32 = 42;
  //! Object is \ref BLArray<T> where `T` matches 64-bit floating point type.
  _BL_OBJECT_TYPE_ARRAY_FLOAT64 = 43;
  //! Object is \ref BLArray<T> where `T` is a struct of size 1.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_1 = 44;
  //! Object is \ref BLArray<T> where `T` is a struct of size 2.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_2 = 45;
  //! Object is \ref BLArray<T> where `T` is a struct of size 3.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_3 = 46;
  //! Object is \ref BLArray<T> where `T` is a struct of size 4.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_4 = 47;
  //! Object is \ref BLArray<T> where `T` is a struct of size 6.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_6 = 48;
  //! Object is \ref BLArray<T> where `T` is a struct of size 8.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_8 = 49;
  //! Object is \ref BLArray<T> where `T` is a struct of size 10.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_10 = 50;
  //! Object is \ref BLArray<T> where `T` is a struct of size 12.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_12 = 51;
  //! Object is \ref BLArray<T> where `T` is a struct of size 16.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_16 = 52;
  //! Object is \ref BLArray<T> where `T` is a struct of size 20.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_20 = 53;
  //! Object is \ref BLArray<T> where `T` is a struct of size 24.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_24 = 54;
  //! Object is \ref BLArray<T> where `T` is a struct of size 32.
  _BL_OBJECT_TYPE_ARRAY_STRUCT_32 = 55;
  //! Object is \ref BLContext.
  _BL_OBJECT_TYPE_CONTEXT = 100;
  //! Object is \ref BLImageCodec.
  _BL_OBJECT_TYPE_IMAGE_CODEC = 101;
  //! Object is \ref BLImageDecoder.
  _BL_OBJECT_TYPE_IMAGE_DECODER = 102;
  //! Object is \ref BLImageEncoder.
  _BL_OBJECT_TYPE_IMAGE_ENCODER = 103;
  //! Object is \ref BLFontFace.
  _BL_OBJECT_TYPE_FONT_FACE = 104;
  //! Object is \ref BLFontData.
  _BL_OBJECT_TYPE_FONT_DATA = 105;
  //! Object is \ref BLFontManager.
  _BL_OBJECT_TYPE_FONT_MANAGER = 106;
  //! Minimum object type of an array object.
  _BL_OBJECT_TYPE_MIN_ARRAY = 33;
  //! Maximum object type of an array object.
  _BL_OBJECT_TYPE_MAX_ARRAY = 55;
  //! Minimum object type identifier that can be used as a style.
  _BL_OBJECT_TYPE_MIN_STYLE = 0;
  //! Maximum object type identifier that can be used as a style.
  _BL_OBJECT_TYPE_MAX_STYLE = 5;
  //! Minimum object type of an object with virtual function table.
  _BL_OBJECT_TYPE_MIN_VIRTUAL = 100;
  //! Maximum object type of an object with virtual function table.
  _BL_OBJECT_TYPE_MAX_VIRTUAL = 127;
  //! Maximum possible value of an object type, including identifiers reserved for the future.
  _BL_OBJECT_TYPE_MAX_VALUE = 127;
  _BL_OBJECT_TYPE_FORCE_UINT = -1;

//! \name BLBitSet - Constants
//! \{
type
  _BLBitSetConstants = Integer;
  _PBLBitSetConstants = ^_BLBitSetConstants;

const
  //! Invalid bit-index.
    //!
    //! This is the only index that cannot be stored in `BLBitSet`.
  _BL_BIT_SET_INVALID_INDEX = -1;
  //! Range mask used by `BLBitsetSegment::start` value - if set the segment is a range of all ones.
  _BL_BIT_SET_RANGE_MASK = -2147483648;
  //! Number of words in a BLBitSetSegment.
  _BL_BIT_SET_SEGMENT_WORD_COUNT = 4;

//! File information flags, used by \ref BLFileInfo.
type
  _BLFileInfoFlags = Integer;
  _PBLFileInfoFlags = ^_BLFileInfoFlags;

const
  //! File owner has read permission (compatible with 0400 octal notation).
  _BL_FILE_INFO_OWNER_R = 256;
  //! File owner has write permission (compatible with 0200 octal notation).
  _BL_FILE_INFO_OWNER_W = 128;
  //! File owner has execute permission (compatible with 0100 octal notation).
  _BL_FILE_INFO_OWNER_X = 64;
  //! A combination of \ref BL_FILE_INFO_OWNER_R, \ref BL_FILE_INFO_OWNER_W, and \ref BL_FILE_INFO_OWNER_X.
  _BL_FILE_INFO_OWNER_MASK = 448;
  //! File group owner has read permission (compatible with 040 octal notation).
  _BL_FILE_INFO_GROUP_R = 32;
  //! File group owner has write permission (compatible with 020 octal notation).
  _BL_FILE_INFO_GROUP_W = 16;
  //! File group owner has execute permission (compatible with 010 octal notation).
  _BL_FILE_INFO_GROUP_X = 8;
  //! A combination of \ref BL_FILE_INFO_GROUP_R, \ref BL_FILE_INFO_GROUP_W, and \ref BL_FILE_INFO_GROUP_X.
  _BL_FILE_INFO_GROUP_MASK = 56;
  //! Other users have read permission (compatible with 04 octal notation).
  _BL_FILE_INFO_OTHER_R = 4;
  //! Other users have write permission (compatible with 02 octal notation).
  _BL_FILE_INFO_OTHER_W = 2;
  //! Other users have execute permission (compatible with 01 octal notation).
  _BL_FILE_INFO_OTHER_X = 1;
  //! A combination of \ref BL_FILE_INFO_OTHER_R, \ref BL_FILE_INFO_OTHER_W, and \ref BL_FILE_INFO_OTHER_X.
  _BL_FILE_INFO_OTHER_MASK = 7;
  //! Set user ID to file owner user ID on execution (compatible with 04000 octal notation).
  _BL_FILE_INFO_SUID = 2048;
  //! Set group ID to file's user group ID on execution (compatible with 02000 octal notation).
  _BL_FILE_INFO_SGID = 1024;
  //! A combination of all file permission bits.
  _BL_FILE_INFO_PERMISSIONS_MASK = 4095;
  //! A flag specifying that this is a regular file.
  _BL_FILE_INFO_REGULAR = 65536;
  //! A flag specifying that this is a directory.
  _BL_FILE_INFO_DIRECTORY = 131072;
  //! A flag specifying that this is a symbolic link.
  _BL_FILE_INFO_SYMLINK = 262144;
  //! A flag describing a character device.
  _BL_FILE_INFO_CHAR_DEVICE = 1048576;
  //! A flag describing a block device.
  _BL_FILE_INFO_BLOCK_DEVICE = 2097152;
  //! A flag describing a FIFO (named pipe).
  _BL_FILE_INFO_FIFO = 4194304;
  //! A flag describing a socket.
  _BL_FILE_INFO_SOCKET = 8388608;
  //! A flag describing a hidden file (Windows only).
  _BL_FILE_INFO_HIDDEN = 16777216;
  //! A flag describing a hidden file (Windows only).
  _BL_FILE_INFO_EXECUTABLE = 33554432;
  //! A flag describing an archive (Windows only).
  _BL_FILE_INFO_ARCHIVE = 67108864;
  //! A flag describing a system file (Windows only).
  _BL_FILE_INFO_SYSTEM = 134217728;
  //! File information is valid (the request succeeded).
  _BL_FILE_INFO_VALID = -2147483648;
  _BL_FILE_INFO_FORCE_UINT = -1;

//! File open flags, see \ref BLFile::open().
type
  _BLFileOpenFlags = Integer;
  _PBLFileOpenFlags = ^_BLFileOpenFlags;

const
  //! No flags.
  _BL_FILE_OPEN_NO_FLAGS = 0;
  //! Opens the file for reading.
    //!
    //! The following system flags are used when opening the file:
    //!   - `O_RDONLY` (Posix)
    //!   - `GENERIC_READ` (Windows)
  _BL_FILE_OPEN_READ = 1;
  //! Opens the file for writing:
    //!
    //! The following system flags are used when opening the file:
    //!   - `O_WRONLY` (Posix)
    //!   - `GENERIC_WRITE` (Windows)
  _BL_FILE_OPEN_WRITE = 2;
  //! Opens the file for reading & writing.
    //!
    //! The following system flags are used when opening the file:
    //!   - `O_RDWR` (Posix)
    //!   - `GENERIC_READ | GENERIC_WRITE` (Windows)
  _BL_FILE_OPEN_RW = 3;
  //! Creates the file if it doesn't exist or opens it if it does.
    //!
    //! The following system flags are used when opening the file:
    //!   - `O_CREAT` (Posix)
    //!   - `CREATE_ALWAYS` or `OPEN_ALWAYS` depending on other flags (Windows)
  _BL_FILE_OPEN_CREATE = 4;
  //! Opens the file for deleting or renaming (Windows).
    //!
    //! Adds `DELETE` flag when opening the file to `ACCESS_MASK`.
  _BL_FILE_OPEN_DELETE = 8;
  //! Truncates the file.
    //!
    //! The following system flags are used when opening the file:
    //!   - `O_TRUNC` (Posix)
    //!   - `TRUNCATE_EXISTING` (Windows)
  _BL_FILE_OPEN_TRUNCATE = 16;
  //! Opens the file for reading in exclusive mode (Windows).
    //!
    //! Exclusive mode means to not specify the `FILE_SHARE_READ` option.
  _BL_FILE_OPEN_READ_EXCLUSIVE = 268435456;
  //! Opens the file for writing in exclusive mode (Windows).
    //!
    //! Exclusive mode means to not specify the `FILE_SHARE_WRITE` option.
  _BL_FILE_OPEN_WRITE_EXCLUSIVE = 536870912;
  //! Opens the file for both reading and writing (Windows).
    //!
    //! This is a combination of both `BL_FILE_OPEN_READ_EXCLUSIVE` and `BL_FILE_OPEN_WRITE_EXCLUSIVE`.
  _BL_FILE_OPEN_RW_EXCLUSIVE = 805306368;
  //! Creates the file in exclusive mode - fails if the file already exists.
    //!
    //! The following system flags are used when opening the file:
    //!   - `O_EXCL` (Posix)
    //!   - `CREATE_NEW` (Windows)
  _BL_FILE_OPEN_CREATE_EXCLUSIVE = 1073741824;
  //! Opens the file for deleting or renaming in exclusive mode (Windows).
    //!
    //! Exclusive mode means to not specify the `FILE_SHARE_DELETE` option.
  _BL_FILE_OPEN_DELETE_EXCLUSIVE = -2147483648;
  _BL_FILE_OPEN_FORCE_UINT = -1;

//! File seek mode, see \ref BLFile::seek().
//!
//! \note Seek constants should be compatible with constants used by both POSIX
//! and Windows API.
type
  _BLFileSeekType = Integer;
  _PBLFileSeekType = ^_BLFileSeekType;

const
  //! Seek from the beginning of the file (SEEK_SET).
  _BL_FILE_SEEK_SET = 0;
  //! Seek from the current position (SEEK_CUR).
  _BL_FILE_SEEK_CUR = 1;
  //! Seek from the end of the file (SEEK_END).
  _BL_FILE_SEEK_END = 2;
  //! Maximum value of `BLFileSeekType`.
  _BL_FILE_SEEK_MAX_VALUE = 3;
  _BL_FILE_SEEK_FORCE_UINT = -1;

//! File read flags used by \ref BLFileSystem::readFile().
type
  _BLFileReadFlags = Integer;
  _PBLFileReadFlags = ^_BLFileReadFlags;

const
  //! No flags.
  _BL_FILE_READ_NO_FLAGS = 0;
  //! Use memory mapping to read the content of the file.
    //!
    //! The destination buffer `BLArray<>` would be configured to use the memory mapped buffer instead of allocating its
    //! own.
  _BL_FILE_READ_MMAP_ENABLED = 1;
  //! Avoid memory mapping of small files.
    //!
    //! The size of small file is determined by Blend2D, however, you should expect it to be 16kB or 64kB depending on
    //! host operating system.
  _BL_FILE_READ_MMAP_AVOID_SMALL = 2;
  //! Do not fallback to regular read if memory mapping fails. It's worth noting that memory mapping would fail for
    //! files stored on filesystem that is not local (like a mounted network filesystem, etc...).
  _BL_FILE_READ_MMAP_NO_FALLBACK = 8;
  _BL_FILE_READ_FORCE_UINT = -1;

//! Direction of a geometry used by geometric primitives and paths.
type
  _BLGeometryDirection = Integer;
  _PBLGeometryDirection = ^_BLGeometryDirection;

const
  //! No direction specified.
  _BL_GEOMETRY_DIRECTION_NONE = 0;
  //! Clockwise direction.
  _BL_GEOMETRY_DIRECTION_CW = 1;
  //! Counter-clockwise direction.
  _BL_GEOMETRY_DIRECTION_CCW = 2;
  _BL_GEOMETRY_DIRECTION_FORCE_UINT = -1;

//! Geometry type.
//!
//! Geometry describes a shape or path that can be either rendered or added to a BLPath container. Both \ref BLPath
//! and \ref BLContext provide functionality to work with all geometry types. Please note that each type provided
//! here requires to pass a matching struct or class to the function that consumes a `geometryType` and `geometryData`
//! arguments.
//!
//! \cond INTERNAL
//! \note Always modify `BL_GEOMETRY_TYPE_SIMPLE_LAST` and related functions when adding a new type to `BLGeometryType`
//! enum. Some functions just pass the geometry type and data to another function, but the rendering context must copy
//! simple types to a render job, which means that it must know which type is simple and also sizes of all simple
//! types, see `geometry_p.h` for more details about handling simple types.
//! \endcond
type
  _BLGeometryType = Integer;
  _PBLGeometryType = ^_BLGeometryType;

const
  //! No geometry provided.
  _BL_GEOMETRY_TYPE_NONE = 0;
  //! BLBoxI struct.
  _BL_GEOMETRY_TYPE_BOXI = 1;
  //! BLBox struct.
  _BL_GEOMETRY_TYPE_BOXD = 2;
  //! BLRectI struct.
  _BL_GEOMETRY_TYPE_RECTI = 3;
  //! BLRect struct.
  _BL_GEOMETRY_TYPE_RECTD = 4;
  //! BLCircle struct.
  _BL_GEOMETRY_TYPE_CIRCLE = 5;
  //! BLEllipse struct.
  _BL_GEOMETRY_TYPE_ELLIPSE = 6;
  //! BLRoundRect struct.
  _BL_GEOMETRY_TYPE_ROUND_RECT = 7;
  //! BLArc struct.
  _BL_GEOMETRY_TYPE_ARC = 8;
  //! BLArc struct representing chord.
  _BL_GEOMETRY_TYPE_CHORD = 9;
  //! BLArc struct representing pie.
  _BL_GEOMETRY_TYPE_PIE = 10;
  //! BLLine struct.
  _BL_GEOMETRY_TYPE_LINE = 11;
  //! BLTriangle struct.
  _BL_GEOMETRY_TYPE_TRIANGLE = 12;
  //! BLArrayView<BLPointI> representing a polyline.
  _BL_GEOMETRY_TYPE_POLYLINEI = 13;
  //! BLArrayView<BLPoint> representing a polyline.
  _BL_GEOMETRY_TYPE_POLYLINED = 14;
  //! BLArrayView<BLPointI> representing a polygon.
  _BL_GEOMETRY_TYPE_POLYGONI = 15;
  //! BLArrayView<BLPoint> representing a polygon.
  _BL_GEOMETRY_TYPE_POLYGOND = 16;
  //! BLArrayView<BLBoxI> struct.
  _BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXI = 17;
  //! BLArrayView<BLBox> struct.
  _BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXD = 18;
  //! BLArrayView<BLRectI> struct.
  _BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTI = 19;
  //! BLArrayView<BLRect> struct.
  _BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTD = 20;
  //! BLPath (or BLPathCore).
  _BL_GEOMETRY_TYPE_PATH = 21;
  //! Maximum value of `BLGeometryType`.
  _BL_GEOMETRY_TYPE_MAX_VALUE = 21;
  //! The last simple type.
  _BL_GEOMETRY_TYPE_SIMPLE_LAST = 12;
  _BL_GEOMETRY_TYPE_FORCE_UINT = -1;

//! Fill rule.
type
  _BLFillRule = Integer;
  _PBLFillRule = ^_BLFillRule;

const
  //! Non-zero fill-rule.
  _BL_FILL_RULE_NON_ZERO = 0;
  //! Even-odd fill-rule.
  _BL_FILL_RULE_EVEN_ODD = 1;
  //! Maximum value of `BLFillRule`.
  _BL_FILL_RULE_MAX_VALUE = 1;
  _BL_FILL_RULE_FORCE_UINT = -1;

//! Hit-test result.
type
  _BLHitTest = Integer;
  _PBLHitTest = ^_BLHitTest;

const
  //! Fully in.
  _BL_HIT_TEST_IN = 0;
  //! Partially in/out.
  _BL_HIT_TEST_PART = 1;
  //! Fully out.
  _BL_HIT_TEST_OUT = 2;
  //! Hit test failed (invalid argument, NaNs, etc).
  _BL_HIT_TEST_INVALID = -1;
  _BL_HIT_TEST_FORCE_UINT = -1;

//! Orientation.
type
  _BLOrientation = Integer;
  _PBLOrientation = ^_BLOrientation;

const
  //! Horizontal orientation.
  _BL_ORIENTATION_HORIZONTAL = 0;
  //! Vertical orientation.
  _BL_ORIENTATION_VERTICAL = 1;
  //! Maximum value of `BLOrientation`.
  _BL_ORIENTATION_MAX_VALUE = 1;
  _BL_ORIENTATION_FORCE_UINT = -1;

//! Type of a font or font face, see \ref BLFontFace (or \ref BLFontFaceCore).
type
  _BLFontFaceType = Integer;
  _PBLFontFaceType = ^_BLFontFaceType;

const
  //! None or unknown font type.
  _BL_FONT_FACE_TYPE_NONE = 0;
  //! TrueType/OpenType font type (.ttf/.otf files and font collections).
  _BL_FONT_FACE_TYPE_OPENTYPE = 1;
  //! Maximum value of `BLFontFaceType`.
  _BL_FONT_FACE_TYPE_MAX_VALUE = 1;
  _BL_FONT_FACE_TYPE_FORCE_UINT = -1;

//! Font stretch.
type
  _BLFontStretch = Integer;
  _PBLFontStretch = ^_BLFontStretch;

const
  //! Ultra condensed stretch.
  _BL_FONT_STRETCH_ULTRA_CONDENSED = 1;
  //! Extra condensed stretch.
  _BL_FONT_STRETCH_EXTRA_CONDENSED = 2;
  //! Condensed stretch.
  _BL_FONT_STRETCH_CONDENSED = 3;
  //! Semi condensed stretch.
  _BL_FONT_STRETCH_SEMI_CONDENSED = 4;
  //! Normal stretch.
  _BL_FONT_STRETCH_NORMAL = 5;
  //! Semi expanded stretch.
  _BL_FONT_STRETCH_SEMI_EXPANDED = 6;
  //! Expanded stretch.
  _BL_FONT_STRETCH_EXPANDED = 7;
  //! Extra expanded stretch.
  _BL_FONT_STRETCH_EXTRA_EXPANDED = 8;
  //! Ultra expanded stretch.
  _BL_FONT_STRETCH_ULTRA_EXPANDED = 9;
  //! Maximum value of `BLFontStretch`.
  _BL_FONT_STRETCH_MAX_VALUE = 9;
  _BL_FONT_STRETCH_FORCE_UINT = -1;

//! Font style.
type
  _BLFontStyle = Integer;
  _PBLFontStyle = ^_BLFontStyle;

const
  //! Normal style.
  _BL_FONT_STYLE_NORMAL = 0;
  //! Oblique.
  _BL_FONT_STYLE_OBLIQUE = 1;
  //! Italic.
  _BL_FONT_STYLE_ITALIC = 2;
  //! Maximum value of `BLFontStyle`.
  _BL_FONT_STYLE_MAX_VALUE = 2;
  _BL_FONT_STYLE_FORCE_UINT = -1;

//! Font weight.
type
  _BLFontWeight = Integer;
  _PBLFontWeight = ^_BLFontWeight;

const
  //! Thin weight (100).
  _BL_FONT_WEIGHT_THIN = 100;
  //! Extra light weight (200).
  _BL_FONT_WEIGHT_EXTRA_LIGHT = 200;
  //! Light weight (300).
  _BL_FONT_WEIGHT_LIGHT = 300;
  //! Semi light weight (350).
  _BL_FONT_WEIGHT_SEMI_LIGHT = 350;
  //! Normal weight (400).
  _BL_FONT_WEIGHT_NORMAL = 400;
  //! Medium weight (500).
  _BL_FONT_WEIGHT_MEDIUM = 500;
  //! Semi bold weight (600).
  _BL_FONT_WEIGHT_SEMI_BOLD = 600;
  //! Bold weight (700).
  _BL_FONT_WEIGHT_BOLD = 700;
  //! Extra bold weight (800).
  _BL_FONT_WEIGHT_EXTRA_BOLD = 800;
  //! Black weight (900).
  _BL_FONT_WEIGHT_BLACK = 900;
  //! Extra black weight (950).
  _BL_FONT_WEIGHT_EXTRA_BLACK = 950;
  _BL_FONT_WEIGHT_FORCE_UINT = -1;

//! Font string identifiers used by OpenType 'name' table.
type
  _BLFontStringId = Integer;
  _PBLFontStringId = ^_BLFontStringId;

const
  //! Copyright notice.
  _BL_FONT_STRING_ID_COPYRIGHT_NOTICE = 0;
  //! Font family name.
  _BL_FONT_STRING_ID_FAMILY_NAME = 1;
  //! Font subfamily name.
  _BL_FONT_STRING_ID_SUBFAMILY_NAME = 2;
  //! Unique font identifier.
  _BL_FONT_STRING_ID_UNIQUE_IDENTIFIER = 3;
  //! Full font name that reflects all family and relevant subfamily descriptors.
  _BL_FONT_STRING_ID_FULL_NAME = 4;
  //! Version string. Should begin with the synta `Version <number>.<number>`.
  _BL_FONT_STRING_ID_VERSION_STRING = 5;
  //! PostScript name for the font.
  _BL_FONT_STRING_ID_POST_SCRIPT_NAME = 6;
  //! Trademark notice/information for this font.
  _BL_FONT_STRING_ID_TRADEMARK = 7;
  //! Manufacturer name.
  _BL_FONT_STRING_ID_MANUFACTURER_NAME = 8;
  //! Name of the designer of the typeface.
  _BL_FONT_STRING_ID_DESIGNER_NAME = 9;
  //! Description of the typeface.
  _BL_FONT_STRING_ID_DESCRIPTION = 10;
  //! URL of font vendor.
  _BL_FONT_STRING_ID_VENDOR_URL = 11;
  //! URL of typeface designer.
  _BL_FONT_STRING_ID_DESIGNER_URL = 12;
  //! Description of how the font may be legally used.
  _BL_FONT_STRING_ID_LICENSE_DESCRIPTION = 13;
  //! URL where additional licensing information can be found.
  _BL_FONT_STRING_ID_LICENSE_INFO_URL = 14;
  //! Reserved.
  _BL_FONT_STRING_ID_RESERVED = 15;
  //! Typographic family name.
  _BL_FONT_STRING_ID_TYPOGRAPHIC_FAMILY_NAME = 16;
  //! Typographic subfamily name.
  _BL_FONT_STRING_ID_TYPOGRAPHIC_SUBFAMILY_NAME = 17;
  //! Compatible full name (MAC only).
  _BL_FONT_STRING_ID_COMPATIBLE_FULL_NAME = 18;
  //! Sample text - font name or any other text from the designer.
  _BL_FONT_STRING_ID_SAMPLE_TEXT = 19;
  //! PostScript CID findfont name.
  _BL_FONT_STRING_ID_POST_SCRIPT_CID_NAME = 20;
  //! WWS family name.
  _BL_FONT_STRING_ID_WWS_FAMILY_NAME = 21;
  //! WWS subfamily name.
  _BL_FONT_STRING_ID_WWS_SUBFAMILY_NAME = 22;
  //! Light background palette.
  _BL_FONT_STRING_ID_LIGHT_BACKGROUND_PALETTE = 23;
  //! Dark background palette.
  _BL_FONT_STRING_ID_DARK_BACKGROUND_PALETTE = 24;
  //! Variations PostScript name prefix.
  _BL_FONT_STRING_ID_VARIATIONS_POST_SCRIPT_PREFIX = 25;
  //! Count of common font string ids.
  _BL_FONT_STRING_ID_COMMON_MAX_VALUE = 26;
  //! Start of custom font string ids.
  _BL_FONT_STRING_ID_CUSTOM_START_INDEX = 255;
  _BL_FONT_STRING_ID_FORCE_UINT = -1;

//! Bit positions in \ref BLFontUnicodeCoverage structure.
//!
//! Each bit represents a range (or multiple ranges) of unicode characters.
type
  _BLFontUnicodeCoverageIndex = Integer;
  _PBLFontUnicodeCoverageIndex = ^_BLFontUnicodeCoverageIndex;

const
  //! [000000-00007F] Basic Latin.
  _BL_FONT_UC_INDEX_BASIC_LATIN = 0;
  //! [000080-0000FF] Latin-1 Supplement.
  _BL_FONT_UC_INDEX_LATIN1_SUPPLEMENT = 1;
  //! [000100-00017F] Latin Extended-A.
  _BL_FONT_UC_INDEX_LATIN_EXTENDED_A = 2;
  //! [000180-00024F] Latin Extended-B.
  _BL_FONT_UC_INDEX_LATIN_EXTENDED_B = 3;
  //! [000250-0002AF] IPA Extensions.
                                                               //!< [001D00-001D7F] Phonetic Extensions.
                                                               //!< [001D80-001DBF] Phonetic Extensions Supplement.
  _BL_FONT_UC_INDEX_IPA_EXTENSIONS = 4;
  //! [0002B0-0002FF] Spacing Modifier Letters.
                                                               //!< [00A700-00A71F] Modifier Tone Letters.
                                                               //!< [001DC0-001DFF] Combining Diacritical Marks Supplement.
  _BL_FONT_UC_INDEX_SPACING_MODIFIER_LETTERS = 5;
  //! [000300-00036F] Combining Diacritical Marks.
  _BL_FONT_UC_INDEX_COMBINING_DIACRITICAL_MARKS = 6;
  //! [000370-0003FF] Greek and Coptic.
  _BL_FONT_UC_INDEX_GREEK_AND_COPTIC = 7;
  //! [002C80-002CFF] Coptic.
  _BL_FONT_UC_INDEX_COPTIC = 8;
  //! [000400-0004FF] Cyrillic.
                                                               //!< [000500-00052F] Cyrillic Supplement.
                                                               //!< [002DE0-002DFF] Cyrillic Extended-A.
                                                               //!< [00A640-00A69F] Cyrillic Extended-B.
  _BL_FONT_UC_INDEX_CYRILLIC = 9;
  //! [000530-00058F] Armenian.
  _BL_FONT_UC_INDEX_ARMENIAN = 10;
  //! [000590-0005FF] Hebrew.
  _BL_FONT_UC_INDEX_HEBREW = 11;
  //! [00A500-00A63F] Vai.
  _BL_FONT_UC_INDEX_VAI = 12;
  //! [000600-0006FF] Arabic.
                                                               //!< [000750-00077F] Arabic Supplement.
  _BL_FONT_UC_INDEX_ARABIC = 13;
  //! [0007C0-0007FF] NKo.
  _BL_FONT_UC_INDEX_NKO = 14;
  //! [000900-00097F] Devanagari.
  _BL_FONT_UC_INDEX_DEVANAGARI = 15;
  //! [000980-0009FF] Bengali.
  _BL_FONT_UC_INDEX_BENGALI = 16;
  //! [000A00-000A7F] Gurmukhi.
  _BL_FONT_UC_INDEX_GURMUKHI = 17;
  //! [000A80-000AFF] Gujarati.
  _BL_FONT_UC_INDEX_GUJARATI = 18;
  //! [000B00-000B7F] Oriya.
  _BL_FONT_UC_INDEX_ORIYA = 19;
  //! [000B80-000BFF] Tamil.
  _BL_FONT_UC_INDEX_TAMIL = 20;
  //! [000C00-000C7F] Telugu.
  _BL_FONT_UC_INDEX_TELUGU = 21;
  //! [000C80-000CFF] Kannada.
  _BL_FONT_UC_INDEX_KANNADA = 22;
  //! [000D00-000D7F] Malayalam.
  _BL_FONT_UC_INDEX_MALAYALAM = 23;
  //! [000E00-000E7F] Thai.
  _BL_FONT_UC_INDEX_THAI = 24;
  //! [000E80-000EFF] Lao.
  _BL_FONT_UC_INDEX_LAO = 25;
  //! [0010A0-0010FF] Georgian.
                                                               //!< [002D00-002D2F] Georgian Supplement.
  _BL_FONT_UC_INDEX_GEORGIAN = 26;
  //! [001B00-001B7F] Balinese.
  _BL_FONT_UC_INDEX_BALINESE = 27;
  //! [001100-0011FF] Hangul Jamo.
  _BL_FONT_UC_INDEX_HANGUL_JAMO = 28;
  //! [001E00-001EFF] Latin Extended Additional.
                                                               //!< [002C60-002C7F] Latin Extended-C.
                                                               //!< [00A720-00A7FF] Latin Extended-D.
  _BL_FONT_UC_INDEX_LATIN_EXTENDED_ADDITIONAL = 29;
  //! [001F00-001FFF] Greek Extended.
  _BL_FONT_UC_INDEX_GREEK_EXTENDED = 30;
  //! [002000-00206F] General Punctuation.
                                                               //!< [002E00-002E7F] Supplemental Punctuation.
  _BL_FONT_UC_INDEX_GENERAL_PUNCTUATION = 31;
  //! [002070-00209F] Superscripts And Subscripts.
  _BL_FONT_UC_INDEX_SUPERSCRIPTS_AND_SUBSCRIPTS = 32;
  //! [0020A0-0020CF] Currency Symbols.
  _BL_FONT_UC_INDEX_CURRENCY_SYMBOLS = 33;
  //! [0020D0-0020FF] Combining Diacritical Marks For Symbols.
  _BL_FONT_UC_INDEX_COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS = 34;
  //! [002100-00214F] Letterlike Symbols.
  _BL_FONT_UC_INDEX_LETTERLIKE_SYMBOLS = 35;
  //! [002150-00218F] Number Forms.
  _BL_FONT_UC_INDEX_NUMBER_FORMS = 36;
  //! [002190-0021FF] Arrows.
                                                               //!< [0027F0-0027FF] Supplemental Arrows-A.
                                                               //!< [002900-00297F] Supplemental Arrows-B.
                                                               //!< [002B00-002BFF] Miscellaneous Symbols and Arrows.
  _BL_FONT_UC_INDEX_ARROWS = 37;
  //! [002200-0022FF] Mathematical Operators.
                                                               //!< [002A00-002AFF] Supplemental Mathematical Operators.
                                                               //!< [0027C0-0027EF] Miscellaneous Mathematical Symbols-A.
                                                               //!< [002980-0029FF] Miscellaneous Mathematical Symbols-B.
  _BL_FONT_UC_INDEX_MATHEMATICAL_OPERATORS = 38;
  //! [002300-0023FF] Miscellaneous Technical.
  _BL_FONT_UC_INDEX_MISCELLANEOUS_TECHNICAL = 39;
  //! [002400-00243F] Control Pictures.
  _BL_FONT_UC_INDEX_CONTROL_PICTURES = 40;
  //! [002440-00245F] Optical Character Recognition.
  _BL_FONT_UC_INDEX_OPTICAL_CHARACTER_RECOGNITION = 41;
  //! [002460-0024FF] Enclosed Alphanumerics.
  _BL_FONT_UC_INDEX_ENCLOSED_ALPHANUMERICS = 42;
  //! [002500-00257F] Box Drawing.
  _BL_FONT_UC_INDEX_BOX_DRAWING = 43;
  //! [002580-00259F] Block Elements.
  _BL_FONT_UC_INDEX_BLOCK_ELEMENTS = 44;
  //! [0025A0-0025FF] Geometric Shapes.
  _BL_FONT_UC_INDEX_GEOMETRIC_SHAPES = 45;
  //! [002600-0026FF] Miscellaneous Symbols.
  _BL_FONT_UC_INDEX_MISCELLANEOUS_SYMBOLS = 46;
  //! [002700-0027BF] Dingbats.
  _BL_FONT_UC_INDEX_DINGBATS = 47;
  //! [003000-00303F] CJK Symbols And Punctuation.
  _BL_FONT_UC_INDEX_CJK_SYMBOLS_AND_PUNCTUATION = 48;
  //! [003040-00309F] Hiragana.
  _BL_FONT_UC_INDEX_HIRAGANA = 49;
  //! [0030A0-0030FF] Katakana.
                                                               //!< [0031F0-0031FF] Katakana Phonetic Extensions.
  _BL_FONT_UC_INDEX_KATAKANA = 50;
  //! [003100-00312F] Bopomofo.
                                                               //!< [0031A0-0031BF] Bopomofo Extended.
  _BL_FONT_UC_INDEX_BOPOMOFO = 51;
  //! [003130-00318F] Hangul Compatibility Jamo.
  _BL_FONT_UC_INDEX_HANGUL_COMPATIBILITY_JAMO = 52;
  //! [00A840-00A87F] Phags-pa.
  _BL_FONT_UC_INDEX_PHAGS_PA = 53;
  //! [003200-0032FF] Enclosed CJK Letters And Months.
  _BL_FONT_UC_INDEX_ENCLOSED_CJK_LETTERS_AND_MONTHS = 54;
  //! [003300-0033FF] CJK Compatibility.
  _BL_FONT_UC_INDEX_CJK_COMPATIBILITY = 55;
  //! [00AC00-00D7AF] Hangul Syllables.
  _BL_FONT_UC_INDEX_HANGUL_SYLLABLES = 56;
  //! [00D800-00DFFF] Non-Plane 0 *.
  _BL_FONT_UC_INDEX_NON_PLANE = 57;
  //! [010900-01091F] Phoenician.
  _BL_FONT_UC_INDEX_PHOENICIAN = 58;
  //! [004E00-009FFF] CJK Unified Ideographs.
                                                               //!< [002E80-002EFF] CJK Radicals Supplement.
                                                               //!< [002F00-002FDF] Kangxi Radicals.
                                                               //!< [002FF0-002FFF] Ideographic Description Characters.
                                                               //!< [003400-004DBF] CJK Unified Ideographs Extension A.
                                                               //!< [020000-02A6DF] CJK Unified Ideographs Extension B.
                                                               //!< [003190-00319F] Kanbun.
  _BL_FONT_UC_INDEX_CJK_UNIFIED_IDEOGRAPHS = 59;
  //! [00E000-00F8FF] Private Use (Plane 0).
  _BL_FONT_UC_INDEX_PRIVATE_USE_PLANE0 = 60;
  //! [0031C0-0031EF] CJK Strokes.
                                                               //!< [00F900-00FAFF] CJK Compatibility Ideographs.
                                                               //!< [02F800-02FA1F] CJK Compatibility Ideographs Supplement.
  _BL_FONT_UC_INDEX_CJK_STROKES = 61;
  //! [00FB00-00FB4F] Alphabetic Presentation Forms.
  _BL_FONT_UC_INDEX_ALPHABETIC_PRESENTATION_FORMS = 62;
  //! [00FB50-00FDFF] Arabic Presentation Forms-A.
  _BL_FONT_UC_INDEX_ARABIC_PRESENTATION_FORMS_A = 63;
  //! [00FE20-00FE2F] Combining Half Marks.
  _BL_FONT_UC_INDEX_COMBINING_HALF_MARKS = 64;
  //! [00FE10-00FE1F] Vertical Forms.
                                                               //!< [00FE30-00FE4F] CJK Compatibility Forms.
  _BL_FONT_UC_INDEX_VERTICAL_FORMS = 65;
  //! [00FE50-00FE6F] Small Form Variants.
  _BL_FONT_UC_INDEX_SMALL_FORM_VARIANTS = 66;
  //! [00FE70-00FEFF] Arabic Presentation Forms-B.
  _BL_FONT_UC_INDEX_ARABIC_PRESENTATION_FORMS_B = 67;
  //! [00FF00-00FFEF] Halfwidth And Fullwidth Forms.
  _BL_FONT_UC_INDEX_HALFWIDTH_AND_FULLWIDTH_FORMS = 68;
  //! [00FFF0-00FFFF] Specials.
  _BL_FONT_UC_INDEX_SPECIALS = 69;
  //! [000F00-000FFF] Tibetan.
  _BL_FONT_UC_INDEX_TIBETAN = 70;
  //! [000700-00074F] Syriac.
  _BL_FONT_UC_INDEX_SYRIAC = 71;
  //! [000780-0007BF] Thaana.
  _BL_FONT_UC_INDEX_THAANA = 72;
  //! [000D80-000DFF] Sinhala.
  _BL_FONT_UC_INDEX_SINHALA = 73;
  //! [001000-00109F] Myanmar.
  _BL_FONT_UC_INDEX_MYANMAR = 74;
  //! [001200-00137F] Ethiopic.
                                                               //!< [001380-00139F] Ethiopic Supplement.
                                                               //!< [002D80-002DDF] Ethiopic Extended.
  _BL_FONT_UC_INDEX_ETHIOPIC = 75;
  //! [0013A0-0013FF] Cherokee.
  _BL_FONT_UC_INDEX_CHEROKEE = 76;
  //! [001400-00167F] Unified Canadian Aboriginal Syllabics.
  _BL_FONT_UC_INDEX_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 77;
  //! [001680-00169F] Ogham.
  _BL_FONT_UC_INDEX_OGHAM = 78;
  //! [0016A0-0016FF] Runic.
  _BL_FONT_UC_INDEX_RUNIC = 79;
  //! [001780-0017FF] Khmer.
                                                               //!< [0019E0-0019FF] Khmer Symbols.
  _BL_FONT_UC_INDEX_KHMER = 80;
  //! [001800-0018AF] Mongolian.
  _BL_FONT_UC_INDEX_MONGOLIAN = 81;
  //! [002800-0028FF] Braille Patterns.
  _BL_FONT_UC_INDEX_BRAILLE_PATTERNS = 82;
  //! [00A000-00A48F] Yi Syllables.
                                                               //!< [00A490-00A4CF] Yi Radicals.
  _BL_FONT_UC_INDEX_YI_SYLLABLES_AND_RADICALS = 83;
  //! [001700-00171F] Tagalog.
                                                               //!< [001720-00173F] Hanunoo.
                                                               //!< [001740-00175F] Buhid.
                                                               //!< [001760-00177F] Tagbanwa.
  _BL_FONT_UC_INDEX_TAGALOG_HANUNOO_BUHID_TAGBANWA = 84;
  //! [010300-01032F] Old Italic.
  _BL_FONT_UC_INDEX_OLD_ITALIC = 85;
  //! [010330-01034F] Gothic.
  _BL_FONT_UC_INDEX_GOTHIC = 86;
  //! [010400-01044F] Deseret.
  _BL_FONT_UC_INDEX_DESERET = 87;
  //! [01D000-01D0FF] Byzantine Musical Symbols.
                                                               //!< [01D100-01D1FF] Musical Symbols.
                                                               //!< [01D200-01D24F] Ancient Greek Musical Notation.
  _BL_FONT_UC_INDEX_MUSICAL_SYMBOLS = 88;
  //! [01D400-01D7FF] Mathematical Alphanumeric Symbols.
  _BL_FONT_UC_INDEX_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 89;
  //! [0F0000-0FFFFD] Private Use (Plane 15).
                                                               //!< [100000-10FFFD] Private Use (Plane 16).
  _BL_FONT_UC_INDEX_PRIVATE_USE_PLANE_15_16 = 90;
  //! [00FE00-00FE0F] Variation Selectors.
                                                               //!< [0E0100-0E01EF] Variation Selectors Supplement.
  _BL_FONT_UC_INDEX_VARIATION_SELECTORS = 91;
  //! [0E0000-0E007F] Tags.
  _BL_FONT_UC_INDEX_TAGS = 92;
  //! [001900-00194F] Limbu.
  _BL_FONT_UC_INDEX_LIMBU = 93;
  //! [001950-00197F] Tai Le.
  _BL_FONT_UC_INDEX_TAI_LE = 94;
  //! [001980-0019DF] New Tai Lue.
  _BL_FONT_UC_INDEX_NEW_TAI_LUE = 95;
  //! [001A00-001A1F] Buginese.
  _BL_FONT_UC_INDEX_BUGINESE = 96;
  //! [002C00-002C5F] Glagolitic.
  _BL_FONT_UC_INDEX_GLAGOLITIC = 97;
  //! [002D30-002D7F] Tifinagh.
  _BL_FONT_UC_INDEX_TIFINAGH = 98;
  //! [004DC0-004DFF] Yijing Hexagram Symbols.
  _BL_FONT_UC_INDEX_YIJING_HEXAGRAM_SYMBOLS = 99;
  //! [00A800-00A82F] Syloti Nagri.
  _BL_FONT_UC_INDEX_SYLOTI_NAGRI = 100;
  //! [010000-01007F] Linear B Syllabary.
                                                               //!< [010080-0100FF] Linear B Ideograms.
                                                               //!< [010100-01013F] Aegean Numbers.
  _BL_FONT_UC_INDEX_LINEAR_B_SYLLABARY_AND_IDEOGRAMS = 101;
  //! [010140-01018F] Ancient Greek Numbers.
  _BL_FONT_UC_INDEX_ANCIENT_GREEK_NUMBERS = 102;
  //! [010380-01039F] Ugaritic.
  _BL_FONT_UC_INDEX_UGARITIC = 103;
  //! [0103A0-0103DF] Old Persian.
  _BL_FONT_UC_INDEX_OLD_PERSIAN = 104;
  //! [010450-01047F] Shavian.
  _BL_FONT_UC_INDEX_SHAVIAN = 105;
  //! [010480-0104AF] Osmanya.
  _BL_FONT_UC_INDEX_OSMANYA = 106;
  //! [010800-01083F] Cypriot Syllabary.
  _BL_FONT_UC_INDEX_CYPRIOT_SYLLABARY = 107;
  //! [010A00-010A5F] Kharoshthi.
  _BL_FONT_UC_INDEX_KHAROSHTHI = 108;
  //! [01D300-01D35F] Tai Xuan Jing Symbols.
  _BL_FONT_UC_INDEX_TAI_XUAN_JING_SYMBOLS = 109;
  //! [012000-0123FF] Cuneiform.
                                                               //!< [012400-01247F] Cuneiform Numbers and Punctuation.
  _BL_FONT_UC_INDEX_CUNEIFORM = 110;
  //! [01D360-01D37F] Counting Rod Numerals.
  _BL_FONT_UC_INDEX_COUNTING_ROD_NUMERALS = 111;
  //! [001B80-001BBF] Sundanese.
  _BL_FONT_UC_INDEX_SUNDANESE = 112;
  //! [001C00-001C4F] Lepcha.
  _BL_FONT_UC_INDEX_LEPCHA = 113;
  //! [001C50-001C7F] Ol Chiki.
  _BL_FONT_UC_INDEX_OL_CHIKI = 114;
  //! [00A880-00A8DF] Saurashtra.
  _BL_FONT_UC_INDEX_SAURASHTRA = 115;
  //! [00A900-00A92F] Kayah Li.
  _BL_FONT_UC_INDEX_KAYAH_LI = 116;
  //! [00A930-00A95F] Rejang.
  _BL_FONT_UC_INDEX_REJANG = 117;
  //! [00AA00-00AA5F] Cham.
  _BL_FONT_UC_INDEX_CHAM = 118;
  //! [010190-0101CF] Ancient Symbols.
  _BL_FONT_UC_INDEX_ANCIENT_SYMBOLS = 119;
  //! [0101D0-0101FF] Phaistos Disc.
  _BL_FONT_UC_INDEX_PHAISTOS_DISC = 120;
  //! [0102A0-0102DF] Carian.
                                                               //!< [010280-01029F] Lycian.
                                                               //!< [010920-01093F] Lydian.
  _BL_FONT_UC_INDEX_CARIAN_LYCIAN_LYDIAN = 121;
  //! [01F030-01F09F] Domino Tiles.
                                                               //!< [01F000-01F02F] Mahjong Tiles.
  _BL_FONT_UC_INDEX_DOMINO_AND_MAHJONG_TILES = 122;
  //! Reserved for internal usage (123).
  _BL_FONT_UC_INDEX_INTERNAL_USAGE_123 = 123;
  //! Reserved for internal usage (124).
  _BL_FONT_UC_INDEX_INTERNAL_USAGE_124 = 124;
  //! Reserved for internal usage (125).
  _BL_FONT_UC_INDEX_INTERNAL_USAGE_125 = 125;
  //! Reserved for internal usage (126).
  _BL_FONT_UC_INDEX_INTERNAL_USAGE_126 = 126;
  //! Reserved for internal usage (127).
  _BL_FONT_UC_INDEX_INTERNAL_USAGE_127 = 127;
  //! Maximum value of `BLFontUnicodeCoverageIndex`.
  _BL_FONT_UC_INDEX_MAX_VALUE = 128;
  _BL_FONT_UC_INDEX_FORCE_UINT = -1;

//! Text direction.
type
  _BLTextDirection = Integer;
  _PBLTextDirection = ^_BLTextDirection;

const
  //! Left-to-right direction.
  _BL_TEXT_DIRECTION_LTR = 0;
  //! Right-to-left direction.
  _BL_TEXT_DIRECTION_RTL = 1;
  //! Maximum value of `BLTextDirection`.
  _BL_TEXT_DIRECTION_MAX_VALUE = 1;
  _BL_TEXT_DIRECTION_FORCE_UINT = -1;

//! Flags used by \ref BLFontData (or \ref BLFontDataCore).
type
  _BLFontDataFlags = Integer;
  _PBLFontDataFlags = ^_BLFontDataFlags;

const
  //! No flags.
  _BL_FONT_DATA_NO_FLAGS = 0;
  _BL_FONT_DATA_FLAG_COLLECTION = 1;
  _BL_FONT_DATA_FLAG_FORCE_UINT = -1;

//! Flags used by \ref BLGlyphRun.
type
  _BLGlyphRunFlags = Integer;
  _PBLGlyphRunFlags = ^_BLGlyphRunFlags;

const
  //! No flags.
  _BL_GLYPH_RUN_NO_FLAGS = 0;
  //! Glyph-run contains UCS-4 string and not glyphs (glyph-buffer only).
  _BL_GLYPH_RUN_FLAG_UCS4_CONTENT = 268435456;
  //! Glyph-run was created from text that was not a valid unicode.
  _BL_GLYPH_RUN_FLAG_INVALID_TEXT = 536870912;
  //! Not the whole text was mapped to glyphs (contains undefined glyphs).
  _BL_GLYPH_RUN_FLAG_UNDEFINED_GLYPHS = 1073741824;
  //! Encountered invalid font data during text / glyph processing.
  _BL_GLYPH_RUN_FLAG_INVALID_FONT_DATA = -2147483648;
  _BL_GLYPH_RUN_FLAG_FORCE_UINT = -1;

//! Placement of glyphs stored in a \ref BLGlyphRun.
type
  _BLGlyphPlacementType = Integer;
  _PBLGlyphPlacementType = ^_BLGlyphPlacementType;

const
  //! No placement (custom handling by \ref BLPathSinkFunc).
  _BL_GLYPH_PLACEMENT_TYPE_NONE = 0;
  //! Each glyph has a BLGlyphPlacement (advance + offset).
  _BL_GLYPH_PLACEMENT_TYPE_ADVANCE_OFFSET = 1;
  //! Each glyph has a BLPoint offset in design-space units.
  _BL_GLYPH_PLACEMENT_TYPE_DESIGN_UNITS = 2;
  //! Each glyph has a BLPoint offset in user-space units.
  _BL_GLYPH_PLACEMENT_TYPE_USER_UNITS = 3;
  //! Each glyph has a BLPoint offset in absolute units.
  _BL_GLYPH_PLACEMENT_TYPE_ABSOLUTE_UNITS = 4;
  //! Maximum value of `BLGlyphPlacementType`.
  _BL_GLYPH_PLACEMENT_TYPE_MAX_VALUE = 4;
  _BL_GLYPH_PLACEMENT_TYPE_FORCE_UINT = -1;

//! Path command.
type
  _BLPathCmd = Integer;
  _PBLPathCmd = ^_BLPathCmd;

const
  //! Move-to command (starts a new figure).
  _BL_PATH_CMD_MOVE = 0;
  //! On-path command (interpreted as line-to or the end of a curve).
  _BL_PATH_CMD_ON = 1;
  //! Quad-to control point.
  _BL_PATH_CMD_QUAD = 2;
  //! Conic-to control point
  _BL_PATH_CMD_CONIC = 3;
  //! Cubic-to control point (always used as a pair of commands).
  _BL_PATH_CMD_CUBIC = 4;
  //! Close path.
  _BL_PATH_CMD_CLOSE = 5;
  //! Conic weight.
    //!
    //! \note This is not a point. This is a pair of values from which only the first (x) is used to represent weight
    //! as used by conic curve. The other value (y) is always set to NaN by Blend2D, but can be arbitrary as it has
    //! no meaning.
  _BL_PATH_CMD_WEIGHT = 6;
  //! Maximum value of `BLPathCmd`.
  _BL_PATH_CMD_MAX_VALUE = 6;
  _BL_PATH_CMD_FORCE_UINT = -1;

//! Path command (never stored in path).
type
  _BLPathCmdExtra = Integer;
  _PBLPathCmdExtra = ^_BLPathCmdExtra;

const
  //! Used by `BLPath::setVertexAt` to preserve the current command value.
  _BL_PATH_CMD_PRESERVE = -1;

//! Path flags.
type
  _BLPathFlags = Integer;
  _PBLPathFlags = ^_BLPathFlags;

const
  //! No flags.
  _BL_PATH_NO_FLAGS = 0;
  //! Path is empty (no commands or close commands only).
  _BL_PATH_FLAG_EMPTY = 1;
  //! Path contains multiple figures.
  _BL_PATH_FLAG_MULTIPLE = 2;
  //! Path contains one or more quad curves.
  _BL_PATH_FLAG_QUADS = 4;
  //! Path contains one or more conic curves.
  _BL_PATH_FLAG_CONICS = 8;
  //! Path contains one or more cubic curves.
  _BL_PATH_FLAG_CUBICS = 16;
  //! Path is invalid.
  _BL_PATH_FLAG_INVALID = 1073741824;
  //! Flags are dirty (not reflecting the current status).
  _BL_PATH_FLAG_DIRTY = -2147483648;
  _BL_PATH_FLAG_FORCE_UINT = -1;

//! Path reversal mode.
type
  _BLPathReverseMode = Integer;
  _PBLPathReverseMode = ^_BLPathReverseMode;

const
  //! Reverse each figure and their order as well (default).
  _BL_PATH_REVERSE_MODE_COMPLETE = 0;
  //! Reverse each figure separately (keeps their order).
  _BL_PATH_REVERSE_MODE_SEPARATE = 1;
  //! Maximum value of `BLPathReverseMode`.
  _BL_PATH_REVERSE_MODE_MAX_VALUE = 1;
  _BL_PATH_REVERSE_MODE_FORCE_UINT = -1;

//! Stroke join type.
type
  _BLStrokeJoin = Integer;
  _PBLStrokeJoin = ^_BLStrokeJoin;

const
  //! Miter-join possibly clipped at `miterLimit` [default].
  _BL_STROKE_JOIN_MITER_CLIP = 0;
  //! Miter-join or bevel-join depending on miterLimit condition.
  _BL_STROKE_JOIN_MITER_BEVEL = 1;
  //! Miter-join or round-join depending on miterLimit condition.
  _BL_STROKE_JOIN_MITER_ROUND = 2;
  //! Bevel-join.
  _BL_STROKE_JOIN_BEVEL = 3;
  //! Round-join.
  _BL_STROKE_JOIN_ROUND = 4;
  //! Maximum value of `BLStrokeJoin`.
  _BL_STROKE_JOIN_MAX_VALUE = 4;
  _BL_STROKE_JOIN_FORCE_UINT = -1;

//! Position of a stroke-cap.
type
  _BLStrokeCapPosition = Integer;
  _PBLStrokeCapPosition = ^_BLStrokeCapPosition;

const
  //! Start of the path.
  _BL_STROKE_CAP_POSITION_START = 0;
  //! End of the path.
  _BL_STROKE_CAP_POSITION_END = 1;
  //! Maximum value of `BLStrokeCapPosition`.
  _BL_STROKE_CAP_POSITION_MAX_VALUE = 1;
  _BL_STROKE_CAP_POSITION_FORCE_UINT = -1;

//! A presentation attribute defining the shape to be used at the end of open sub-paths.
type
  _BLStrokeCap = Integer;
  _PBLStrokeCap = ^_BLStrokeCap;

const
  //! Butt cap [default].
  _BL_STROKE_CAP_BUTT = 0;
  //! Square cap.
  _BL_STROKE_CAP_SQUARE = 1;
  //! Round cap.
  _BL_STROKE_CAP_ROUND = 2;
  //! Round cap reversed.
  _BL_STROKE_CAP_ROUND_REV = 3;
  //! Triangle cap.
  _BL_STROKE_CAP_TRIANGLE = 4;
  //! Triangle cap reversed.
  _BL_STROKE_CAP_TRIANGLE_REV = 5;
  //! Maximum value of `BLStrokeCap`.
  _BL_STROKE_CAP_MAX_VALUE = 5;
  _BL_STROKE_CAP_FORCE_UINT = -1;

//! Stroke transform order.
type
  _BLStrokeTransformOrder = Integer;
  _PBLStrokeTransformOrder = ^_BLStrokeTransformOrder;

const
  //! Transform after stroke  => `Transform(Stroke(Input))` [default].
  _BL_STROKE_TRANSFORM_ORDER_AFTER = 0;
  //! Transform before stroke => `Stroke(Transform(Input))`.
  _BL_STROKE_TRANSFORM_ORDER_BEFORE = 1;
  //! Maximum value of `BLStrokeTransformOrder`.
  _BL_STROKE_TRANSFORM_ORDER_MAX_VALUE = 1;
  _BL_STROKE_TRANSFORM_ORDER_FORCE_UINT = -1;

//! Mode that specifies how curves are approximated to line segments.
type
  _BLFlattenMode = Integer;
  _PBLFlattenMode = ^_BLFlattenMode;

const
  //! Use default mode (decided by Blend2D).
  _BL_FLATTEN_MODE_DEFAULT = 0;
  //! Recursive subdivision flattening.
  _BL_FLATTEN_MODE_RECURSIVE = 1;
  //! Maximum value of `BLFlattenMode`.
  _BL_FLATTEN_MODE_MAX_VALUE = 1;
  _BL_FLATTEN_MODE_FORCE_UINT = -1;

//! Mode that specifies how to construct offset curves.
type
  _BLOffsetMode = Integer;
  _PBLOffsetMode = ^_BLOffsetMode;

const
  //! Use default mode (decided by Blend2D).
  _BL_OFFSET_MODE_DEFAULT = 0;
  //! Iterative offset construction.
  _BL_OFFSET_MODE_ITERATIVE = 1;
  //! Maximum value of `BLOffsetMode`.
  _BL_OFFSET_MODE_MAX_VALUE = 1;
  _BL_OFFSET_MODE_FORCE_UINT = -1;

//! Flags used by \ref BLFontFace (or \ref BLFontFaceCore)
type
  _BLFontFaceFlags = Integer;
  _PBLFontFaceFlags = ^_BLFontFaceFlags;

const
  //! No flags.
  _BL_FONT_FACE_NO_FLAGS = 0;
  //! Font uses typographic family and subfamily names.
  _BL_FONT_FACE_FLAG_TYPOGRAPHIC_NAMES = 1;
  //! Font uses typographic metrics.
  _BL_FONT_FACE_FLAG_TYPOGRAPHIC_METRICS = 2;
  //! Character to glyph mapping is available.
  _BL_FONT_FACE_FLAG_CHAR_TO_GLYPH_MAPPING = 4;
  //! Horizontal glyph metrics (advances, side bearings) is available.
  _BL_FONT_FACE_FLAG_HORIZONTAL_METIRCS = 16;
  //! Vertical glyph metrics (advances, side bearings) is available.
  _BL_FONT_FACE_FLAG_VERTICAL_METRICS = 32;
  //! Legacy horizontal kerning feature ('kern' table with horizontal kerning data).
  _BL_FONT_FACE_FLAG_HORIZONTAL_KERNING = 64;
  //! Legacy vertical kerning feature ('kern' table with vertical kerning data).
  _BL_FONT_FACE_FLAG_VERTICAL_KERNING = 128;
  //! OpenType features (GDEF, GPOS, GSUB) are available.
  _BL_FONT_FACE_FLAG_OPENTYPE_FEATURES = 256;
  //! Panose classification is available.
  _BL_FONT_FACE_FLAG_PANOSE_DATA = 512;
  //! Unicode coverage information is available.
  _BL_FONT_FACE_FLAG_UNICODE_COVERAGE = 1024;
  //! Baseline for font at `y` equals 0.
  _BL_FONT_FACE_FLAG_BASELINE_Y_EQUALS_0 = 4096;
  //! Left sidebearing point at `x == 0` (TT only).
  _BL_FONT_FACE_FLAG_LSB_POINT_X_EQUALS_0 = 8192;
  //! Unicode variation sequences feature is available.
  _BL_FONT_FACE_FLAG_VARIATION_SEQUENCES = 268435456;
  //! OpenType Font Variations feature is available.
  _BL_FONT_FACE_FLAG_OPENTYPE_VARIATIONS = 536870912;
  //! This is a symbol font.
  _BL_FONT_FACE_FLAG_SYMBOL_FONT = 1073741824;
  //! This is a last resort font.
  _BL_FONT_FACE_FLAG_LAST_RESORT_FONT = -2147483648;
  _BL_FONT_FACE_FLAG_FORCE_UINT = -1;

//! Diagnostic flags offered by \ref BLFontFace (or \ref BLFontFaceCore).
type
  _BLFontFaceDiagFlags = Integer;
  _PBLFontFaceDiagFlags = ^_BLFontFaceDiagFlags;

const
  //! No flags.
  _BL_FONT_FACE_DIAG_NO_FLAGS = 0;
  //! Wrong data in 'name' table.
  _BL_FONT_FACE_DIAG_WRONG_NAME_DATA = 1;
  //! Fixed data read from 'name' table and possibly fixed font family/subfamily name.
  _BL_FONT_FACE_DIAG_FIXED_NAME_DATA = 2;
  //! Wrong data in 'kern' table [kerning disabled].
  _BL_FONT_FACE_DIAG_WRONG_KERN_DATA = 4;
  //! Fixed data read from 'kern' table so it can be used.
  _BL_FONT_FACE_DIAG_FIXED_KERN_DATA = 8;
  //! Wrong data in 'cmap' table.
  _BL_FONT_FACE_DIAG_WRONG_CMAP_DATA = 16;
  //! Wrong format in 'cmap' (sub)table.
  _BL_FONT_FACE_DIAG_WRONG_CMAP_FORMAT = 32;
  _BL_FONT_FACE_DIAG_FORCE_UINT = -1;

//! Format of an outline stored in a font.
type
  _BLFontOutlineType = Integer;
  _PBLFontOutlineType = ^_BLFontOutlineType;

const
  //! None.
  _BL_FONT_OUTLINE_TYPE_NONE = 0;
  //! Truetype outlines.
  _BL_FONT_OUTLINE_TYPE_TRUETYPE = 1;
  //! OpenType (CFF) outlines.
  _BL_FONT_OUTLINE_TYPE_CFF = 2;
  //! OpenType (CFF2) outlines with font variations support.
  _BL_FONT_OUTLINE_TYPE_CFF2 = 3;
  //! Maximum value of `BLFontOutlineType`.
  _BL_FONT_OUTLINE_TYPE_MAX_VALUE = 3;
  _BL_FONT_OUTLINE_TYPE_FORCE_UINT = -1;

//! Transformation matrix type that can be obtained by calling `BLMatrix2D::type()`.
//!
//! ```
//!  Identity  Transl.  Scale     Swap    Affine
//!   [1  0]   [1  0]   [.  0]   [0  .]   [.  .]
//!   [0  1]   [0  1]   [0  .]   [.  0]   [.  .]
//!   [0  0]   [.  .]   [.  .]   [.  .]   [.  .]
//! ```
type
  _BLTransformType = Integer;
  _PBLTransformType = ^_BLTransformType;

const
  //! Identity matrix.
  _BL_TRANSFORM_TYPE_IDENTITY = 0;
  //! Has translation part (the rest is like identity).
  _BL_TRANSFORM_TYPE_TRANSLATE = 1;
  //! Has translation and scaling parts.
  _BL_TRANSFORM_TYPE_SCALE = 2;
  //! Has translation and scaling parts, however scaling swaps X/Y.
  _BL_TRANSFORM_TYPE_SWAP = 3;
  //! Generic affine matrix.
  _BL_TRANSFORM_TYPE_AFFINE = 4;
  //! Invalid/degenerate matrix not useful for transformations.
  _BL_TRANSFORM_TYPE_INVALID = 5;
  //! Maximum value of `BLTransformType`.
  _BL_TRANSFORM_TYPE_MAX_VALUE = 5;
  _BL_MATRIX2D_TYPE_FORCE_UINT = -1;

//! Transformation matrix operation type.
type
  _BLTransformOp = Integer;
  _PBLTransformOp = ^_BLTransformOp;

const
  //! Reset matrix to identity (argument ignored, should be nullptr).
  _BL_TRANSFORM_OP_RESET = 0;
  //! Assign (copy) the other matrix.
  _BL_TRANSFORM_OP_ASSIGN = 1;
  //! Translate the matrix by [x, y].
  _BL_TRANSFORM_OP_TRANSLATE = 2;
  //! Scale the matrix by [x, y].
  _BL_TRANSFORM_OP_SCALE = 3;
  //! Skew the matrix by [x, y].
  _BL_TRANSFORM_OP_SKEW = 4;
  //! Rotate the matrix by the given angle about [0, 0].
  _BL_TRANSFORM_OP_ROTATE = 5;
  //! Rotate the matrix by the given angle about [x, y].
  _BL_TRANSFORM_OP_ROTATE_PT = 6;
  //! Transform this matrix by other \ref BLMatrix2D.
  _BL_TRANSFORM_OP_TRANSFORM = 7;
  //! Post-translate the matrix by [x, y].
  _BL_TRANSFORM_OP_POST_TRANSLATE = 8;
  //! Post-scale the matrix by [x, y].
  _BL_TRANSFORM_OP_POST_SCALE = 9;
  //! Post-skew the matrix by [x, y].
  _BL_TRANSFORM_OP_POST_SKEW = 10;
  //! Post-rotate the matrix about [0, 0].
  _BL_TRANSFORM_OP_POST_ROTATE = 11;
  //! Post-rotate the matrix about a reference BLPoint.
  _BL_TRANSFORM_OP_POST_ROTATE_PT = 12;
  //! Post-transform this matrix by other \ref BLMatrix2D.
  _BL_TRANSFORM_OP_POST_TRANSFORM = 13;
  //! Maximum value of `BLTransformOp`.
  _BL_TRANSFORM_OP_MAX_VALUE = 13;
  _BL_TRANSFORM_OP_FORCE_UINT = -1;

//! Gradient type.
type
  _BLGradientType = Integer;
  _PBLGradientType = ^_BLGradientType;

const
  //! Linear gradient type.
  _BL_GRADIENT_TYPE_LINEAR = 0;
  //! Radial gradient type.
  _BL_GRADIENT_TYPE_RADIAL = 1;
  //! Conic gradient type.
  _BL_GRADIENT_TYPE_CONIC = 2;
  //! Maximum value of `BLGradientType`.
  _BL_GRADIENT_TYPE_MAX_VALUE = 2;
  _BL_GRADIENT_TYPE_FORCE_UINT = -1;

//! Gradient data index.
type
  _BLGradientValue = Integer;
  _PBLGradientValue = ^_BLGradientValue;

const
  //! x0 - start 'x' for a Linear gradient and `x` center for both Radial and Conic gradients.
  _BL_GRADIENT_VALUE_COMMON_X0 = 0;
  //! y0 - start 'y' for a Linear gradient and `y` center for both Radial and Conic gradients.
  _BL_GRADIENT_VALUE_COMMON_Y0 = 1;
  //! x1 - end 'x' for a Linear gradient and focal point `x` for a Radial gradient.
  _BL_GRADIENT_VALUE_COMMON_X1 = 2;
  //! y1 - end 'y' for a Linear/gradient and focal point `y` for a Radial gradient.
  _BL_GRADIENT_VALUE_COMMON_Y1 = 3;
  //! Radial gradient center radius.
  _BL_GRADIENT_VALUE_RADIAL_R0 = 4;
  //! Radial gradient focal radius.
  _BL_GRADIENT_VALUE_RADIAL_R1 = 5;
  //! Conic gradient angle.
  _BL_GRADIENT_VALUE_CONIC_ANGLE = 2;
  //! Conic gradient angle.
  _BL_GRADIENT_VALUE_CONIC_REPEAT = 3;
  //! Maximum value of `BLGradientValue`.
  _BL_GRADIENT_VALUE_MAX_VALUE = 5;
  _BL_GRADIENT_VALUE_FORCE_UINT = -1;

//! Gradient rendering quality.
type
  _BLGradientQuality = Integer;
  _PBLGradientQuality = ^_BLGradientQuality;

const
  //! Nearest neighbor.
  _BL_GRADIENT_QUALITY_NEAREST = 0;
  //! Use smoothing, if available (currently never available).
  _BL_GRADIENT_QUALITY_SMOOTH = 1;
  //! The renderer will use an implementation-specific dithering algorithm to prevent banding.
  _BL_GRADIENT_QUALITY_DITHER = 2;
  //! Maximum value of `BLGradientQuality`.
  _BL_GRADIENT_QUALITY_MAX_VALUE = 2;
  _BL_GRADIENT_QUALITY_FORCE_UINT = -1;

//! Pixel format.
//!
//! Compatibility Table
//! -------------------
//!
//! ```
//! +---------------------+---------------------+-----------------------------+
//! | Blend2D Format      | Cairo Format        | QImage::Format              |
//! +---------------------+---------------------+-----------------------------+
//! | BL_FORMAT_PRGB32    | CAIRO_FORMAT_ARGB32 | Format_ARGB32_Premultiplied |
//! | BL_FORMAT_XRGB32    | CAIRO_FORMAT_RGB24  | Format_RGB32                |
//! | BL_FORMAT_A8        | CAIRO_FORMAT_A8     | n/a                         |
//! +---------------------+---------------------+-----------------------------+
//! ```
type
  _BLFormat = Integer;
  _PBLFormat = ^_BLFormat;

const
  //! None or invalid pixel format.
  _BL_FORMAT_NONE = 0;
  //! 32-bit premultiplied ARGB pixel format (8-bit components).
  _BL_FORMAT_PRGB32 = 1;
  //! 32-bit (X)RGB pixel format (8-bit components, alpha ignored).
  _BL_FORMAT_XRGB32 = 2;
  //! 8-bit alpha-only pixel format.
  _BL_FORMAT_A8 = 3;
  //! 8-bit alpha-only pixel format.
  _BL_FORMAT_MAX_VALUE = 3;
  _BL_FORMAT_FORCE_UINT = -1;

//! Pixel format flags.
type
  _BLFormatFlags = Integer;
  _PBLFormatFlags = ^_BLFormatFlags;

const
  //! No flags.
  _BL_FORMAT_NO_FLAGS = 0;
  //! Pixel format provides RGB components.
  _BL_FORMAT_FLAG_RGB = 1;
  //! Pixel format provides only alpha component.
  _BL_FORMAT_FLAG_ALPHA = 2;
  //! A combination of `BL_FORMAT_FLAG_RGB | BL_FORMAT_FLAG_ALPHA`.
  _BL_FORMAT_FLAG_RGBA = 3;
  //! Pixel format provides LUM component (and not RGB components).
  _BL_FORMAT_FLAG_LUM = 4;
  //! A combination of `BL_FORMAT_FLAG_LUM | BL_FORMAT_FLAG_ALPHA`.
  _BL_FORMAT_FLAG_LUMA = 6;
  //! Indexed pixel format the requires a palette (I/O only).
  _BL_FORMAT_FLAG_INDEXED = 16;
  //! RGB components are premultiplied by alpha component.
  _BL_FORMAT_FLAG_PREMULTIPLIED = 256;
  //! Pixel format doesn't use native byte-order (I/O only).
  _BL_FORMAT_FLAG_BYTE_SWAP = 512;
  //! Pixel components are byte aligned (all 8bpp).
  _BL_FORMAT_FLAG_BYTE_ALIGNED = 65536;
  //! Pixel has some undefined bits that represent no information.
    //!
    //! For example a 32-bit XRGB pixel has 8 undefined bits that are usually set to all ones so the format can be
    //! interpreted as premultiplied RGB as well. There are other formats like 16_0555 where the bit has no information
    //! and is usually set to zero. Blend2D doesn't rely on the content of such bits.
  _BL_FORMAT_FLAG_UNDEFINED_BITS = 131072;
  //! Convenience flag that contains either zero or `BL_FORMAT_FLAG_BYTE_SWAP` depending on host byte order. Little
    //! endian hosts have this flag set to zero and big endian hosts to `BL_FORMAT_FLAG_BYTE_SWAP`.
    //!
    //! \note This is not a real flag that you can test, it's only provided for convenience to define little endian
    //! pixel formats.
  _BL_FORMAT_FLAG_LE = 0;
  //! Convenience flag that contains either zero or `BL_FORMAT_FLAG_BYTE_SWAP` depending on host byte order. Big
    //! endian hosts have this flag set to zero and little endian hosts to `BL_FORMAT_FLAG_BYTE_SWAP`.
    //!
    //! \note This is not a real flag that you can test, it's only provided for convenience to define big endian
    //! pixel formats.
  _BL_FORMAT_FLAG_BE = 512;
  _BL_FORMAT_FLAG_FORCE_UINT = -1;

//! Image codec feature bits.
type
  _BLImageCodecFeatures = Integer;
  _PBLImageCodecFeatures = ^_BLImageCodecFeatures;

const
  //! No features.
  _BL_IMAGE_CODEC_NO_FEATURES = 0;
  //! Image codec supports reading images (can create BLImageDecoder).
  _BL_IMAGE_CODEC_FEATURE_READ = 1;
  //! Image codec supports writing images (can create BLImageEncoder).
  _BL_IMAGE_CODEC_FEATURE_WRITE = 2;
  //! Image codec supports lossless compression.
  _BL_IMAGE_CODEC_FEATURE_LOSSLESS = 4;
  //! Image codec supports loosy compression.
  _BL_IMAGE_CODEC_FEATURE_LOSSY = 8;
  //! Image codec supports writing multiple frames (GIF).
  _BL_IMAGE_CODEC_FEATURE_MULTI_FRAME = 16;
  //! Image codec supports IPTC metadata.
  _BL_IMAGE_CODEC_FEATURE_IPTC = 268435456;
  //! Image codec supports EXIF metadata.
  _BL_IMAGE_CODEC_FEATURE_EXIF = 536870912;
  //! Image codec supports XMP metadata.
  _BL_IMAGE_CODEC_FEATURE_XMP = 1073741824;
  _BL_IMAGE_CODEC_FEATURE_FORCE_UINT = -1;

//! Flags used by `BLImageInfo`.
type
  _BLImageInfoFlags = Integer;
  _PBLImageInfoFlags = ^_BLImageInfoFlags;

const
  //! No flags.
  _BL_IMAGE_INFO_FLAG_NO_FLAGS = 0;
  //! Progressive mode.
  _BL_IMAGE_INFO_FLAG_PROGRESSIVE = 1;
  _BL_IMAGE_INFO_FLAG_FORCE_UINT = -1;

//! Filter type used by `BLImage::scale()`.
type
  _BLImageScaleFilter = Integer;
  _PBLImageScaleFilter = ^_BLImageScaleFilter;

const
  //! No filter or uninitialized.
  _BL_IMAGE_SCALE_FILTER_NONE = 0;
  //! Nearest neighbor filter (radius 1.0).
  _BL_IMAGE_SCALE_FILTER_NEAREST = 1;
  //! Bilinear filter (radius 1.0).
  _BL_IMAGE_SCALE_FILTER_BILINEAR = 2;
  //! Bicubic filter (radius 2.0).
  _BL_IMAGE_SCALE_FILTER_BICUBIC = 3;
  //! Lanczos filter (radius 2.0).
  _BL_IMAGE_SCALE_FILTER_LANCZOS = 4;
  //! Maximum value of `BLImageScaleFilter`.
  _BL_IMAGE_SCALE_FILTER_MAX_VALUE = 4;
  _BL_IMAGE_SCALE_FILTER_FORCE_UINT = -1;

//! Pattern quality.
type
  _BLPatternQuality = Integer;
  _PBLPatternQuality = ^_BLPatternQuality;

const
  //! Nearest neighbor interpolation.
  _BL_PATTERN_QUALITY_NEAREST = 0;
  //! Bilinear interpolation.
  _BL_PATTERN_QUALITY_BILINEAR = 1;
  //! Maximum value of `BLPatternQuality`.
  _BL_PATTERN_QUALITY_MAX_VALUE = 1;
  _BL_PATTERN_QUALITY_FORCE_UINT = -1;

//! Rendering context type.
type
  _BLContextType = Integer;
  _PBLContextType = ^_BLContextType;

const
  //! No rendering context.
  _BL_CONTEXT_TYPE_NONE = 0;
  //! Dummy rendering context.
  _BL_CONTEXT_TYPE_DUMMY = 1;
  //! Software-accelerated rendering context.
  _BL_CONTEXT_TYPE_RASTER = 3;
  //! Maximum value of `BLContextType`.
  _BL_CONTEXT_TYPE_MAX_VALUE = 3;
  _BL_CONTEXT_TYPE_FORCE_UINT = -1;

//! Rendering context hint.
type
  _BLContextHint = Integer;
  _PBLContextHint = ^_BLContextHint;

const
  //! Rendering quality.
  _BL_CONTEXT_HINT_RENDERING_QUALITY = 0;
  //! Gradient quality.
  _BL_CONTEXT_HINT_GRADIENT_QUALITY = 1;
  //! Pattern quality.
  _BL_CONTEXT_HINT_PATTERN_QUALITY = 2;
  //! Maximum value of `BLContextHint`.
  _BL_CONTEXT_HINT_MAX_VALUE = 7;
  _BL_CONTEXT_HINT_FORCE_UINT = -1;

//! Describes a rendering context style slot - fill or stroke.
type
  _BLContextStyleSlot = Integer;
  _PBLContextStyleSlot = ^_BLContextStyleSlot;

const
  //! Fill operation style slot.
  _BL_CONTEXT_STYLE_SLOT_FILL = 0;
  //! Stroke operation style slot.
  _BL_CONTEXT_STYLE_SLOT_STROKE = 1;
  //! Maximum value of `BLContextStyleSlot`
  _BL_CONTEXT_STYLE_SLOT_MAX_VALUE = 1;
  _BL_CONTEXT_STYLE_SLOT_FORCE_UINT = -1;

//! The type of a text rendering operation.
//!
//! This value specifies the type of the parameter passed to the text rendering API.
//!
//! \note In most cases this should not be required to use by Blend2D users. The C API provides functions that
//! wrap all of the text operations and C++ API provides functions that use `BLContextRenderTextOp` internally.
type
  _BLContextRenderTextOp = Integer;
  _PBLContextRenderTextOp = ^_BLContextRenderTextOp;

const
  //! UTF-8 text rendering operation - UTF-8 string passed as \ref BLStringView or \ref BLArrayView<uint8_t>.
  _BL_CONTEXT_RENDER_TEXT_OP_UTF8 = 0;
  //! UTF-16 text rendering operation - UTF-16 string passed as \ref BLArrayView<uint16_t>.
  _BL_CONTEXT_RENDER_TEXT_OP_UTF16 = 1;
  //! UTF-32 text rendering operation - UTF-32 string passed as \ref BLArrayView<uint32_t>.
  _BL_CONTEXT_RENDER_TEXT_OP_UTF32 = 2;
  //! LATIN1 text rendering operation - LATIN1 string is passed as \ref BLStringView or \ref BLArrayView<uint8_t>.
  _BL_CONTEXT_RENDER_TEXT_OP_LATIN1 = 3;
  //! `wchar_t` text rendering operation - wchar_t string is passed as \ref BLArrayView<wchar_t>.
  _BL_CONTEXT_RENDER_TEXT_OP_WCHAR = 1;
  //! Glyph run text rendering operation - the \ref BLGlyphRun parameter is passed.
  _BL_CONTEXT_RENDER_TEXT_OP_GLYPH_RUN = 4;
  //! Maximum value of `BLContextRenderTextInputType`
  _BL_CONTEXT_RENDER_TEXT_OP_MAX_VALUE = 4;
  _BL_CONTEXT_RENDER_TEXT_OP_TYPE_FORCE_UINT = -1;

//! Rendering context flush flags, used by \ref BLContext::flush().
type
  _BLContextFlushFlags = Integer;
  _PBLContextFlushFlags = ^_BLContextFlushFlags;

const
  _BL_CONTEXT_FLUSH_NO_FLAGS = 0;
  //! Flushes the command queue and waits for its completion (will block until done).
  _BL_CONTEXT_FLUSH_SYNC = -2147483648;
  _BL_CONTEXT_FLUSH_FORCE_UINT = -1;

//! Rendering context creation flags.
type
  _BLContextCreateFlags = Integer;
  _PBLContextCreateFlags = ^_BLContextCreateFlags;

const
  //! No flags.
  _BL_CONTEXT_CREATE_NO_FLAGS = 0;
  //! Disables JIT pipeline generator.
  _BL_CONTEXT_CREATE_FLAG_DISABLE_JIT = 1;
  //! Fallbacks to a synchronous rendering in case that the rendering engine wasn't able to acquire threads. This
    //! flag only makes sense when the asynchronous mode was specified by having `threadCount` greater than 0. If the
    //! rendering context fails to acquire at least one thread it would fallback to synchronous mode with no worker
    //! threads.
    //!
    //! \note If this flag is specified with `threadCount == 1` it means to immediately fallback to synchronous
    //! rendering. It's only practical to use this flag with 2 or more requested threads.
  _BL_CONTEXT_CREATE_FLAG_FALLBACK_TO_SYNC = 1048576;
  //! If this flag is specified and asynchronous rendering is enabled then the context would create its own isolated
    //! thread-pool, which is useful for debugging purposes.
    //!
    //! Do not use this flag in production as rendering contexts with isolated thread-pool have to create and destroy all
    //! threads they use. This flag is only useful for testing, debugging, and isolated benchmarking.
  _BL_CONTEXT_CREATE_FLAG_ISOLATED_THREAD_POOL = 16777216;
  //! If this flag is specified and JIT pipeline generation enabled then the rendering context would create its own
    //! isolated JIT runtime. which is useful for debugging purposes. This flag will be ignored if JIT pipeline
    //! compilation is either not supported or was disabled by other flags.
    //!
    //! Do not use this flag in production as rendering contexts with isolated JIT runtime do not use global pipeline
    //! cache, that's it, after the rendering context is destroyed the JIT runtime is destroyed with it with all
    //! compiled pipelines. This flag is only useful for testing, debugging, and isolated benchmarking.
  _BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_RUNTIME = 33554432;
  //! Enables logging to stderr of isolated runtime.
    //!
    //! \note Must be used with \ref BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_RUNTIME otherwise it would have no effect.
  _BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_LOGGING = 67108864;
  //! Override CPU features when creating isolated context.
  _BL_CONTEXT_CREATE_FLAG_OVERRIDE_CPU_FEATURES = 134217728;
  _BL_CONTEXT_CREATE_FLAG_FORCE_UINT = -1;

//! Error flags that are accumulated during the rendering context lifetime and that can be queried through
//! \ref BLContext::accumulatedErrorFlags(). The reason why these flags exist is that errors can happen during
//! asynchronous rendering, and there is no way the user can catch these errors.
type
  _BLContextErrorFlags = Integer;
  _PBLContextErrorFlags = ^_BLContextErrorFlags;

const
  //! No flags.
  _BL_CONTEXT_ERROR_NO_FLAGS = 0;
  //! The rendering context returned or encountered \ref BL_ERROR_INVALID_VALUE, which is mostly related to
    //! the function argument handling. It's very likely some argument was wrong when calling \ref BLContext API.
  _BL_CONTEXT_ERROR_FLAG_INVALID_VALUE = 1;
  //! Invalid state describes something wrong, for example a pipeline compilation error.
  _BL_CONTEXT_ERROR_FLAG_INVALID_STATE = 2;
  //! The rendering context has encountered invalid geometry.
  _BL_CONTEXT_ERROR_FLAG_INVALID_GEOMETRY = 4;
  //! The rendering context has encountered invalid glyph.
  _BL_CONTEXT_ERROR_FLAG_INVALID_GLYPH = 8;
  //! The rendering context has encountered invalid or uninitialized font.
  _BL_CONTEXT_ERROR_FLAG_INVALID_FONT = 16;
  //! Thread pool was exhausted and couldn't acquire the requested number of threads.
  _BL_CONTEXT_ERROR_FLAG_THREAD_POOL_EXHAUSTED = 536870912;
  //! Out of memory condition.
  _BL_CONTEXT_ERROR_FLAG_OUT_OF_MEMORY = 1073741824;
  //! Unknown error, which we don't have flag for.
  _BL_CONTEXT_ERROR_FLAG_UNKNOWN_ERROR = -2147483648;
  _BL_CONTEXT_ERROR_FLAG_FORCE_UINT = -1;

//! Specifies the behavior of \ref BLContext::swapStyles() operation.
type
  _BLContextStyleSwapMode = Integer;
  _PBLContextStyleSwapMode = ^_BLContextStyleSwapMode;

const
  //! Swap only fill and stroke styles without affecting fill and stroke alpha.
  _BL_CONTEXT_STYLE_SWAP_MODE_STYLES = 0;
  //! Swap both fill and stroke styles and their alpha values.
  _BL_CONTEXT_STYLE_SWAP_MODE_STYLES_WITH_ALPHA = 1;
  //! Maximum value of `BLContextStyleSwapMode`.
  _BL_CONTEXT_STYLE_SWAP_MODE_MAX_VALUE = 1;
  _BL_CONTEXT_STYLE_SWAP_MODE_FORCE_UINT = -1;

//! Specifies how style transformation matrix is combined with the rendering context transformation matrix, used by
//! \ref BLContext::setStyle() function.
type
  _BLContextStyleTransformMode = Integer;
  _PBLContextStyleTransformMode = ^_BLContextStyleTransformMode;

const
  //! Style transformation matrix should be transformed with the rendering context user and meta matrix (default).
    //!
    //! \note This transformation mode is identical to how user geometry is transformed and it's the default
    //! transformation and most likely the behavior expected in most cases.
  _BL_CONTEXT_STYLE_TRANSFORM_MODE_USER = 0;
  //! Style transformation matrix should be transformed with the rendering context meta matrix.
  _BL_CONTEXT_STYLE_TRANSFORM_MODE_META = 1;
  //! Style transformation matrix is considered absolute, and is not combined with a rendering context transform.
  _BL_CONTEXT_STYLE_TRANSFORM_MODE_NONE = 2;
  //! Maximum value of `BLContextStyleTransformMode`.
  _BL_CONTEXT_STYLE_TRANSFORM_MODE_MAX_VALUE = 2;
  _BL_CONTEXT_STYLE_TRANSFORM_MODE_FORCE_UINT = -1;

//! Clip mode.
type
  _BLClipMode = Integer;
  _PBLClipMode = ^_BLClipMode;

const
  //! Clipping to a rectangle that is aligned to the pixel grid.
  _BL_CLIP_MODE_ALIGNED_RECT = 0;
  //! Clipping to a rectangle that is not aligned to pixel grid.
  _BL_CLIP_MODE_UNALIGNED_RECT = 1;
  //! Clipping to a non-rectangular area that is defined by using mask.
  _BL_CLIP_MODE_MASK = 2;
  //! Count of clip modes.
  _BL_CLIP_MODE_COUNT = 3;
  _BL_CLIP_MODE_FORCE_UINT = -1;

//! Composition & blending operator.
type
  _BLCompOp = Integer;
  _PBLCompOp = ^_BLCompOp;

const
  //! Source-over [default].
  _BL_COMP_OP_SRC_OVER = 0;
  //! Source-copy.
  _BL_COMP_OP_SRC_COPY = 1;
  //! Source-in.
  _BL_COMP_OP_SRC_IN = 2;
  //! Source-out.
  _BL_COMP_OP_SRC_OUT = 3;
  //! Source-atop.
  _BL_COMP_OP_SRC_ATOP = 4;
  //! Destination-over.
  _BL_COMP_OP_DST_OVER = 5;
  //! Destination-copy [nop].
  _BL_COMP_OP_DST_COPY = 6;
  //! Destination-in.
  _BL_COMP_OP_DST_IN = 7;
  //! Destination-out.
  _BL_COMP_OP_DST_OUT = 8;
  //! Destination-atop.
  _BL_COMP_OP_DST_ATOP = 9;
  //! Xor.
  _BL_COMP_OP_XOR = 10;
  //! Clear.
  _BL_COMP_OP_CLEAR = 11;
  //! Plus.
  _BL_COMP_OP_PLUS = 12;
  //! Minus.
  _BL_COMP_OP_MINUS = 13;
  //! Modulate.
  _BL_COMP_OP_MODULATE = 14;
  //! Multiply.
  _BL_COMP_OP_MULTIPLY = 15;
  //! Screen.
  _BL_COMP_OP_SCREEN = 16;
  //! Overlay.
  _BL_COMP_OP_OVERLAY = 17;
  //! Darken.
  _BL_COMP_OP_DARKEN = 18;
  //! Lighten.
  _BL_COMP_OP_LIGHTEN = 19;
  //! Color dodge.
  _BL_COMP_OP_COLOR_DODGE = 20;
  //! Color burn.
  _BL_COMP_OP_COLOR_BURN = 21;
  //! Linear burn.
  _BL_COMP_OP_LINEAR_BURN = 22;
  //! Linear light.
  _BL_COMP_OP_LINEAR_LIGHT = 23;
  //! Pin light.
  _BL_COMP_OP_PIN_LIGHT = 24;
  //! Hard-light.
  _BL_COMP_OP_HARD_LIGHT = 25;
  //! Soft-light.
  _BL_COMP_OP_SOFT_LIGHT = 26;
  //! Difference.
  _BL_COMP_OP_DIFFERENCE = 27;
  //! Exclusion.
  _BL_COMP_OP_EXCLUSION = 28;
  //! Count of composition & blending operators.
  _BL_COMP_OP_MAX_VALUE = 28;
  _BL_COMP_OP_FORCE_UINT = -1;

//! Rendering quality.
type
  _BLRenderingQuality = Integer;
  _PBLRenderingQuality = ^_BLRenderingQuality;

const
  //! Render using anti-aliasing.
  _BL_RENDERING_QUALITY_ANTIALIAS = 0;
  //! Maximum value of `BLRenderingQuality`.
  _BL_RENDERING_QUALITY_MAX_VALUE = 0;
  _BL_RENDERING_QUALITY_FORCE_UINT = -1;

//! Flags used by `BLPixelConverter::create()` function.
type
  _BLPixelConverterCreateFlags = Integer;
  _PBLPixelConverterCreateFlags = ^_BLPixelConverterCreateFlags;

const
  //! No flags.
  _BL_PIXEL_CONVERTER_CREATE_NO_FLAGS = 0;
  //! Specifies that the source palette in `BLFormatInfo` doesn't have to by copied by `BLPixelConverter`. The caller
    //! must ensure that the palette would stay valid until the pixel converter is destroyed.
  _BL_PIXEL_CONVERTER_CREATE_FLAG_DONT_COPY_PALETTE = 1;
  //! Specifies that the source palette in `BLFormatInfo` is alterable and the pixel converter can modify it when
    //! preparing the conversion. The modification can be irreversible so only use this flag when you are sure that
    //! the palette passed to `BLPixelConverter::create()` won't be needed outside of pixel conversion.
    //!
    //! \note The flag `BL_PIXEL_CONVERTER_CREATE_FLAG_DONT_COPY_PALETTE` must be set as well, otherwise this flag would
    //! be ignored.
  _BL_PIXEL_CONVERTER_CREATE_FLAG_ALTERABLE_PALETTE = 2;
  //! When there is no built-in conversion between the given pixel formats it's possible to use an intermediate format
    //! that is used during conversion. In such case the base pixel converter creates two more converters that are then
    //! used internally.
    //!
    //! This option disables such feature - creating a pixel converter would fail with `BL_ERROR_NOT_IMPLEMENTED` error
    //! if direct conversion is not possible.
  _BL_PIXEL_CONVERTER_CREATE_FLAG_NO_MULTI_STEP = 4;
  _BL_PIXEL_CONVERTER_CREATE_FLAG_FORCE_UINT = -1;

//! Blend2D runtime limits.
//!
//! \note These constants are used across Blend2D, but they are not designed to be ABI stable. New versions of Blend2D
//! can increase certain limits without notice. Use runtime to query the limits dynamically, see \ref BLRuntimeBuildInfo.
type
  _BLRuntimeLimits = Integer;
  _PBLRuntimeLimits = ^_BLRuntimeLimits;

const
  //! Maximum width and height of an image.
  _BL_RUNTIME_MAX_IMAGE_SIZE = 65535;
  //! Maximum number of threads for asynchronous operations (including rendering).
  _BL_RUNTIME_MAX_THREAD_COUNT = 32;

//! Type of runtime information that can be queried through \ref blRuntimeQueryInfo().
type
  _BLRuntimeInfoType = Integer;
  _PBLRuntimeInfoType = ^_BLRuntimeInfoType;

const
  //! Blend2D build information.
  _BL_RUNTIME_INFO_TYPE_BUILD = 0;
  //! System information (includes CPU architecture, features, core count, etc...).
  _BL_RUNTIME_INFO_TYPE_SYSTEM = 1;
  //! Resources information (includes Blend2D memory consumption)
  _BL_RUNTIME_INFO_TYPE_RESOURCE = 2;
  //! Count of runtime information types.
  _BL_RUNTIME_INFO_TYPE_MAX_VALUE = 2;
  _BL_RUNTIME_INFO_TYPE_FORCE_UINT = -1;

//! Blend2D runtime build type.
type
  _BLRuntimeBuildType = Integer;
  _PBLRuntimeBuildType = ^_BLRuntimeBuildType;

const
  //! Describes a Blend2D debug build.
  _BL_RUNTIME_BUILD_TYPE_DEBUG = 0;
  //! Describes a Blend2D release build.
  _BL_RUNTIME_BUILD_TYPE_RELEASE = 1;
  _BL_RUNTIME_BUILD_TYPE_FORCE_UINT = -1;

//! CPU architecture that can be queried by `BLRuntime::querySystemInfo()`.
type
  _BLRuntimeCpuArch = Integer;
  _PBLRuntimeCpuArch = ^_BLRuntimeCpuArch;

const
  //! Unknown architecture.
  _BL_RUNTIME_CPU_ARCH_UNKNOWN = 0;
  //! 32-bit or 64-bit X86 architecture.
  _BL_RUNTIME_CPU_ARCH_X86 = 1;
  //! 32-bit or 64-bit ARM architecture.
  _BL_RUNTIME_CPU_ARCH_ARM = 2;
  //! 32-bit or 64-bit MIPS architecture.
  _BL_RUNTIME_CPU_ARCH_MIPS = 3;
  _BL_RUNTIME_CPU_ARCH_FORCE_UINT = -1;

//! CPU features Blend2D supports.
type
  _BLRuntimeCpuFeatures = Integer;
  _PBLRuntimeCpuFeatures = ^_BLRuntimeCpuFeatures;

const
  _BL_RUNTIME_CPU_FEATURE_X86_SSE2 = 1;
  _BL_RUNTIME_CPU_FEATURE_X86_SSE3 = 2;
  _BL_RUNTIME_CPU_FEATURE_X86_SSSE3 = 4;
  _BL_RUNTIME_CPU_FEATURE_X86_SSE4_1 = 8;
  _BL_RUNTIME_CPU_FEATURE_X86_SSE4_2 = 16;
  _BL_RUNTIME_CPU_FEATURE_X86_AVX = 32;
  _BL_RUNTIME_CPU_FEATURE_X86_AVX2 = 64;
  _BL_RUNTIME_CPU_FEATURE_X86_AVX512 = 128;
  _BL_RUNTIME_CPU_FEATURE_ARM_ASIMD = 1;
  _BL_RUNTIME_CPU_FEATURE_ARM_CRC32 = 2;
  _BL_RUNTIME_CPU_FEATURE_ARM_PMULL = 4;
  _BL_RUNTIME_CPU_FEATURE_FORCE_UINT = -1;

//! Runtime cleanup flags that can be used through `BLRuntime::cleanup()`.
type
  _BLRuntimeCleanupFlags = Integer;
  _PBLRuntimeCleanupFlags = ^_BLRuntimeCleanupFlags;

const
  //! No flags.
  _BL_RUNTIME_CLEANUP_NO_FLAGS = 0;
  //! Cleanup object memory pool.
  _BL_RUNTIME_CLEANUP_OBJECT_POOL = 1;
  //! Cleanup zeroed memory pool.
  _BL_RUNTIME_CLEANUP_ZEROED_POOL = 2;
  //! Cleanup thread pool (would join unused threads).
  _BL_RUNTIME_CLEANUP_THREAD_POOL = 16;
  //! Cleanup everything.
  _BL_RUNTIME_CLEANUP_EVERYTHING = -1;
  _BL_RUNTIME_CLEANUP_FLAG_FORCE_UINT = -1;

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PUInt32 = ^UInt32;
  PPUInt32 = ^PUInt32;
  PInt32 = ^Int32;
  PNativeUInt = ^NativeUInt;
  PUInt8 = ^UInt8;
  PPUInt8 = ^PUInt8;
  PInt64 = ^Int64;
  PUInt64 = ^UInt64;
  _PBLRange = ^_BLRange;
  _PBLArrayView = ^_BLArrayView;
  _PBLStringView = ^_BLStringView;
  _PBLRgba32 = ^_BLRgba32;
  _PBLRgba64 = ^_BLRgba64;
  _PBLRgba = ^_BLRgba;
  _PBLObjectInfo = ^_BLObjectInfo;
  _PBLObjectVirtBase = ^_BLObjectVirtBase;
  _PBLObjectVirt = ^_BLObjectVirt;
  _PBLObjectCore = ^_BLObjectCore;
  _PBLArrayCore = ^_BLArrayCore;
  _PBLArrayImpl = ^_BLArrayImpl;
  _PBLBitArrayCore = ^_BLBitArrayCore;
  _PBLBitArrayImpl = ^_BLBitArrayImpl;
  _PBLBitSetSegment = ^_BLBitSetSegment;
  _PBLBitSetData = ^_BLBitSetData;
  _PBLBitSetCore = ^_BLBitSetCore;
  _PBLBitSetBuilderCore = ^_BLBitSetBuilderCore;
  _PBLBitSetImpl = ^_BLBitSetImpl;
  _PBLFileCore = ^_BLFileCore;
  _PBLFileInfo = ^_BLFileInfo;
  _PBLPointI = ^_BLPointI;
  _PBLSizeI = ^_BLSizeI;
  _PBLBoxI = ^_BLBoxI;
  _PBLRectI = ^_BLRectI;
  _PBLPoint = ^_BLPoint;
  _PPBLPoint = ^_PBLPoint;
  _PBLSize = ^_BLSize;
  _PBLBox = ^_BLBox;
  _PBLRect = ^_BLRect;
  _PBLLine = ^_BLLine;
  _PBLTriangle = ^_BLTriangle;
  _PBLRoundRect = ^_BLRoundRect;
  _PBLCircle = ^_BLCircle;
  _PBLEllipse = ^_BLEllipse;
  _PBLArc = ^_BLArc;
  _PBLGlyphInfo = ^_BLGlyphInfo;
  _PBLGlyphPlacement = ^_BLGlyphPlacement;
  _PBLGlyphMappingState = ^_BLGlyphMappingState;
  _PBLGlyphOutlineSinkInfo = ^_BLGlyphOutlineSinkInfo;
  _PBLFontUnicodeCoverage = ^_BLFontUnicodeCoverage;
  _PBLFontPanose = ^_BLFontPanose;
  _PBLFontMatrix = ^_BLFontMatrix;
  _PBLFontMetrics = ^_BLFontMetrics;
  _PBLFontDesignMetrics = ^_BLFontDesignMetrics;
  _PBLTextMetrics = ^_BLTextMetrics;
  _PBLStringCore = ^_BLStringCore;
  _PBLStringImpl = ^_BLStringImpl;
  _PBLFontTable = ^_BLFontTable;
  _PBLFontDataCore = ^_BLFontDataCore;
  _PBLFontDataVirt = ^_BLFontDataVirt;
  _PBLFontDataImpl = ^_BLFontDataImpl;
  _PBLGlyphRun = ^_BLGlyphRun;
  _PBLGlyphBufferImpl = ^_BLGlyphBufferImpl;
  _PBLGlyphBufferCore = ^_BLGlyphBufferCore;
  _PBLApproximationOptions = ^_BLApproximationOptions;
  _PBLPathView = ^_BLPathView;
  _PBLPathCore = ^_BLPathCore;
  _PBLStrokeOptionsCore = ^_BLStrokeOptionsCore;
  _PBLPathImpl = ^_BLPathImpl;
  _PBLFontFaceInfo = ^_BLFontFaceInfo;
  _PBLFontFaceCore = ^_BLFontFaceCore;
  _PBLFontFaceVirt = ^_BLFontFaceVirt;
  _PBLFontFaceImpl = ^_BLFontFaceImpl;
  _PBLFontFeatureSettingsCore = ^_BLFontFeatureSettingsCore;
  _PBLFontFeatureSettingsImpl = ^_BLFontFeatureSettingsImpl;
  _PBLFontFeatureItem = ^_BLFontFeatureItem;
  _PBLFontFeatureSettingsView = ^_BLFontFeatureSettingsView;
  _PBLFontVariationSettingsCore = ^_BLFontVariationSettingsCore;
  _PBLFontVariationSettingsImpl = ^_BLFontVariationSettingsImpl;
  _PBLFontVariationItem = ^_BLFontVariationItem;
  _PBLFontVariationSettingsView = ^_BLFontVariationSettingsView;
  _PBLFontCore = ^_BLFontCore;
  _PBLFontImpl = ^_BLFontImpl;
  _PBLMatrix2D = ^_BLMatrix2D;
  _PBLGradientStop = ^_BLGradientStop;
  _PBLLinearGradientValues = ^_BLLinearGradientValues;
  _PBLRadialGradientValues = ^_BLRadialGradientValues;
  _PBLConicGradientValues = ^_BLConicGradientValues;
  _PBLGradientCore = ^_BLGradientCore;
  _PBLGradientImpl = ^_BLGradientImpl;
  _PBLFormatInfo = ^_BLFormatInfo;
  _PBLImageCodecCore = ^_BLImageCodecCore;
  _PBLImageCodecVirt = ^_BLImageCodecVirt;
  _PBLImageCodecImpl = ^_BLImageCodecImpl;
  _PBLImageData = ^_BLImageData;
  _PBLImageInfo = ^_BLImageInfo;
  _PBLImageCore = ^_BLImageCore;
  _PBLImageImpl = ^_BLImageImpl;
  _PBLPatternCore = ^_BLPatternCore;
  _PBLPatternImpl = ^_BLPatternImpl;
  _PBLVarCore = ^_BLVarCore;
  _PBLContextCreateInfo = ^_BLContextCreateInfo;
  _PBLContextCookie = ^_BLContextCookie;
  _PBLContextHints = ^_BLContextHints;
  _PBLContextCore = ^_BLContextCore;
  _PBLContextVirt = ^_BLContextVirt;
  _PBLContextState = ^_BLContextState;
  _PBLContextImpl = ^_BLContextImpl;
  _PBLFontManagerCore = ^_BLFontManagerCore;
  _PBLFontManagerVirt = ^_BLFontManagerVirt;
  _PBLFontManagerImpl = ^_BLFontManagerImpl;
  _PBLFontQueryProperties = ^_BLFontQueryProperties;
  _PBLImageDecoderCore = ^_BLImageDecoderCore;
  _PBLImageDecoderVirt = ^_BLImageDecoderVirt;
  _PBLImageDecoderImpl = ^_BLImageDecoderImpl;
  _PBLImageEncoderCore = ^_BLImageEncoderCore;
  _PBLImageEncoderVirt = ^_BLImageEncoderVirt;
  _PBLImageEncoderImpl = ^_BLImageEncoderImpl;
  _PBLPixelConverterOptions = ^_BLPixelConverterOptions;
  _PBLPixelConverterCore = ^_BLPixelConverterCore;
  _PBLRandom = ^_BLRandom;
  _PBLRuntimeBuildInfo = ^_BLRuntimeBuildInfo;
  _PBLRuntimeSystemInfo = ^_BLRuntimeSystemInfo;
  _PBLRuntimeResourceInfo = ^_BLRuntimeResourceInfo;
  _PBLRuntimeScopeCore = ^_BLRuntimeScopeCore;

  _PBLObjectImpl = Pointer;
  _PPBLObjectImpl = ^_PBLObjectImpl;
  //! \ingroup bl_globals
  //!
  //! Result code used by most Blend2D functions (32-bit unsigned integer).
  //!
  //! The \ref BLResultCode enumeration contains Blend2D result codes that contain Blend2D specific set of errors
  //! and an extended set of errors that can come from WIN32 or POSIX APIs. Since the success result code is zero
  //! it's recommended to use the following check to determine whether a call failed or not:
  //!
  //! ```
  //! BLResult result = doSomething();
  //! if (result != BL_SUCCESS) {
  //!   // `doSomething()` failed...
  //! }
  //! ```
  _BLResult = UInt32;
  //! \ingroup bl_globals
  //!
  //! Tag is a 32-bit integer consisting of 4 characters in the following format:
  //!
  //! ```
  //! tag = ((a << 24) | (b << 16) | (c << 8) | d)
  //! ```
  //!
  //! Tags are used extensively by OpenType fonts and other binary formats like PNG. In most cases TAGs should only
  //! contain ASCII letters, digits, and spaces.
  //!
  //! Blend2D uses \ref BLTag in public and internal APIs to distinguish between a regular `uint32_t` and tag.
  _BLTag = UInt32;
  _PBLTag = ^_BLTag;
  //! \ingroup bl_globals
  //!
  //! Unique identifier that can be used for caching purposes.
  //!
  //! Some objects such as \ref BLImage and \ref BLFontFace have assigned an unique identifier that can be used to
  //! identify such objects for caching purposes. This identifier is never zero, so zero can be safely used as
  //! "uncached".
  //!
  //! \note Unique identifier is per-process. It's implemented as an increasing global or thread-local counter in
  //! a way that identifiers would not collide.
  _BLUniqueId = UInt64;
  P_BLUnknown = Pointer;
  PP_BLUnknown = ^P_BLUnknown;

  //! \ingroup bl_globals
  //!
  //! A sink that can be used to debug various parts of Blend2D.
  _BLDebugMessageSinkFunc = procedure(const &message: PUTF8Char; size: NativeUInt; userData: Pointer); cdecl;

  //! Provides start and end indexes. It has the same semantics as Slices in other programming languages - range is
  //! always within [star, end) internal (start is inclusive, end is exclusive). It's used to specify a range of an
  //! operation of indexed containers like \ref BLString, \ref BLArray, \ref BLGradient, \ref BLPath, etc...
  _BLRange = record
    start: NativeUInt;
    &end: NativeUInt;
  end;

  _BLArrayView = record
    data: Pointer;
    size: NativeUInt;
  end;

  _BLStringView = record
    data: PUTF8Char;
    size: NativeUInt;
  end;

  _BLDataView = _BLArrayView;

  //! 32-bit RGBA color (8-bit per component) stored as `0xAARRGGBB`.
  _BLRgba32 = record
    //! Packed 32-bit RGBA value.
    value: UInt32;
  end;

  //! 64-bit RGBA color (16-bit per component) stored as `0xAAAARRRRGGGGBBBB`.
  _BLRgba64 = record
    //! Packed 64-bit RGBA value.
    value: UInt64;
  end;

  //! 128-bit RGBA color stored as 4 32-bit floating point values in [RGBA] order.
  _BLRgba = record
    //! Red component.
    r: Single;
    //! Green component.
    g: Single;
    //! Blur component.
    b: Single;
    //! Alpha component.
    a: Single;
  end;

  //! Information bits used by \ref BLObjectCore and all Blend2D compatible objects inheriting it.
  _BLObjectInfo = record
    //! Stores all object info bits.
    bits: UInt32;
  end;

  P_anonymous_type_1 = ^_anonymous_type_1;
  _anonymous_type_1 = record
    u32_data_overlap: array [0..1] of UInt32;
    impl_payload: UInt32;
    info: _BLObjectInfo;
  end;

  //! Defines a BLObject layout that all objects must use.
  _BLObjectDetail = record
    case Integer of
      0: (impl: _PBLObjectImpl);
      1: (char_data: array [0..15] of UTF8Char);
      2: (i8_data: array [0..15] of Int8);
      3: (u8_data: array [0..15] of UInt8);
      4: (i16_data: array [0..7] of Int16);
      5: (u16_data: array [0..7] of UInt16);
      6: (i32_data: array [0..3] of Int32);
      7: (u32_data: array [0..3] of UInt32);
      8: (i64_data: array [0..1] of Int64);
      9: (u64_data: array [0..1] of UInt64);
      10: (f32_data: array [0..3] of Single);
      11: (f64_data: array [0..1] of Double);
      12: (rgba: _BLRgba);
      13: (rgba32: _BLRgba32);
      14: (rgba64: _BLRgba64);
      15: (f16: _anonymous_type_1);
  end;

  //! A function callback that is called when an Impl that holds external data is going to be destroyed. It's
  //! often used as a notification that a data passed to a certain Impl is no longer in use by Blend2D.
  _BLDestroyExternalDataFunc = procedure(impl: Pointer; externalData: Pointer; userData: Pointer); cdecl;

  //! Base members of \ref BLObjectVirt.
  //!
  //! The reason for this struct is to make C API the same as C++ API in terms of struct members. In C++ mode we use
  //! inheritance so `Virt` structs actually inherit from \ref BLObjectVirt, but in every case all base members are
  //! provided by `base`.
  _BLObjectVirtBase = record
    destroy: function(impl: _PBLObjectImpl): _BLResult; cdecl;
    getProperty: function(const impl: _PBLObjectImpl; const name: PUTF8Char; nameSize: NativeUInt; valueOut: _PBLVarCore): _BLResult; cdecl;
    setProperty: function(impl: _PBLObjectImpl; const name: PUTF8Char; nameSize: NativeUInt; const value: _PBLVarCore): _BLResult; cdecl;
  end;

  //! BLObject [Virtual Function Table].
  //!
  //! Virtual function table is only present when object type is greater than \ref BL_OBJECT_TYPE_MIN_VIRTUAL.
  //! Objects can extend the function table, but it has to always start with members defined by `BLObjectVirt`.
  _BLObjectVirt = record
    base: _BLObjectVirtBase;
  end;

  //! Base class used by all Blend2D objects.
  _BLObjectCore = record
    _d: _BLObjectDetail;
  end;

  //! Array container [C API].
  _BLArrayCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Array container [C API Impl].
  _BLArrayImpl = record
    //! Pointer to array data.
    data: Pointer;
    //! Array size [in items].
    size: NativeUInt;
    //! Array capacity [in items].
    capacity: NativeUInt;
  end;

  //! BitArray container [C API].
  _BLBitArrayCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! BitArray container [C API Impl].
  _BLBitArrayImpl = record
    //! Size in bit units.
    size: UInt32;
    //! Capacity in bit-word units.
    capacity: UInt32;
  end;

  //! BitSet segment.
  //!
  //! Segment provides either a dense set of bits starting at `start` or a range of bits all set to one. The start of
  //! the segment is always aligned to segment size, which can be calculated as `32 * BL_BIT_SET_SEGMENT_WORD_COUNT`.
  //! Even ranges are aligned to this value, thus up to 3 segments are used to describe a range that doesn't start/end
  //! at the segment boundary.
  //!
  //! When the segment describes dense bits its size is always fixed and represents `32 * BL_BIT_SET_SEGMENT_WORD_COUNT`
  //! bits, which is currently 128 bits. However, when the segment describes all ones, the first value in data `data[0]`
  //! describes the last bit of the range, which means that an arbitrary range can be encoded within a single segment.
  _BLBitSetSegment = record
    _startWord: UInt32;
    _data: array [0..3] of UInt32;
  end;

  //! BitSet data view.
  _BLBitSetData = record
    segmentData: _PBLBitSetSegment;
    segmentCount: UInt32;
    ssoSegments: array [0..2] of _BLBitSetSegment;
  end;

  //! BitSet container [C API].
  _BLBitSetCore = record
    _d: _BLObjectDetail;
  end;

  //! BitSet builder [C API].
  _BLBitSetBuilderCore = record
    //! Shift to get `_areaIndex` from bit index, equals to `log2(kBitCount)`.
    _areaShift: UInt32;
    //! Area index - index from 0...N where each index represents `kBitCount` bits.
    _areaIndex: UInt32;
  end;

  //! BitSet container [Impl].
  _BLBitSetImpl = record
    //! Count of used segments in `segmentData`.
    segmentCount: UInt32;
    //! Count of allocated segments in `segmentData`.
    segmentCapacity: UInt32;
  end;

  //! A thin abstraction over a native OS file IO [C API].
  _BLFileCore = record
    //! A file handle - either a file descriptor used by POSIX or file handle used by Windows. On both platforms the
      //! handle is always `intptr_t` to make FFI easier (it's basically the size of a pointer / machine register).
      //!
      //! \note A handle of value `-1` is considered invalid and/or uninitialized. This value also matches Windows API
      //! `INVALID_HANDLE_VALUE`, which is also defined to be -1.
    handle: IntPtr;
  end;

  //! File information.
  _BLFileInfo = record
    //! \name Members
      //! \{
    size: UInt64;
    modifiedTime: Int64;
    flags: _BLFileInfoFlags;
    uid: UInt32;
    gid: UInt32;
    reserved: array [0..4] of UInt32;
  end;

  //! Point specified as [x, y] using `int` as a storage type.
  _BLPointI = record
    x: Integer;
    y: Integer;
  end;

  //! Size specified as [w, h] using `int` as a storage type.
  _BLSizeI = record
    w: Integer;
    h: Integer;
  end;

  //! Box specified as [x0, y0, x1, y1] using `int` as a storage type.
  _BLBoxI = record
    x0: Integer;
    y0: Integer;
    x1: Integer;
    y1: Integer;
  end;

  //! Rectangle specified as [x, y, w, h] using `int` as a storage type.
  _BLRectI = record
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
  end;

  //! Point specified as [x, y] using `double` as a storage type.
  _BLPoint = record
    x: Double;
    y: Double;
  end;

  //! Size specified as [w, h] using `double` as a storage type.
  _BLSize = record
    w: Double;
    h: Double;
  end;

  //! Box specified as [x0, y0, x1, y1] using `double` as a storage type.
  _BLBox = record
    x0: Double;
    y0: Double;
    x1: Double;
    y1: Double;
  end;

  //! Rectangle specified as [x, y, w, h] using `double` as a storage type.
  _BLRect = record
    x: Double;
    y: Double;
    w: Double;
    h: Double;
  end;

  //! Line specified as [x0, y0, x1, y1] using `double` as a storage type.
  _BLLine = record
    x0: Double;
    y0: Double;
    x1: Double;
    y1: Double;
  end;

  //! Triangle data specified as [x0, y0, x1, y1, x2, y2] using `double` as a storage type.
  _BLTriangle = record
    x0: Double;
    y0: Double;
    x1: Double;
    y1: Double;
    x2: Double;
    y2: Double;
  end;

  //! Rounded rectangle specified as [x, y, w, h, rx, ry] using `double` as a storage type.
  _BLRoundRect = record
    x: Double;
    y: Double;
    w: Double;
    h: Double;
    rx: Double;
    ry: Double;
  end;

  //! Circle specified as [cx, cy, r] using `double` as a storage type.
  _BLCircle = record
    cx: Double;
    cy: Double;
    r: Double;
  end;

  //! Ellipse specified as [cx, cy, rx, ry] using `double` as a storage type.
  _BLEllipse = record
    cx: Double;
    cy: Double;
    rx: Double;
    ry: Double;
  end;

  //! Arc specified as [cx, cy, rx, ry, start, sweep] using `double` as a storage type.
  _BLArc = record
    cx: Double;
    cy: Double;
    rx: Double;
    ry: Double;
    start: Double;
    sweep: Double;
  end;

  //! Glyph id - a 32-bit unsigned integer.
  _BLGlyphId = UInt32;

  //! Contains additional information associated with a glyph used by \ref BLGlyphBuffer.
  _BLGlyphInfo = record
    //! \name Members
      //! \{
    cluster: UInt32;
    reserved: UInt32;
  end;

  //! Glyph placement.
  //!
  //! Provides information about glyph offset (x/y) and advance (x/y).
  _BLGlyphPlacement = record
    //! \name Members
      //! \{
    placement: _BLPointI;
    advance: _BLPointI;
  end;

  //! Character to glyph mapping state.
  _BLGlyphMappingState = record
    //! Number of glyphs or glyph-items on output.
    glyphCount: NativeUInt;
    //! Index of the first undefined glyph (SIZE_MAX if none).
    undefinedFirst: NativeUInt;
    //! Undefined glyph count (chars that have no mapping).
    undefinedCount: NativeUInt;
  end;

  //! Information passed to a \ref BLPathSinkFunc sink by \ref BLFont::getGlyphOutlines().
  _BLGlyphOutlineSinkInfo = record
    glyphIndex: NativeUInt;
    contourCount: NativeUInt;
  end;

  //! Font unicode coverage.
  //!
  //! Unicode coverage describes which unicode characters are provided by a font. Blend2D accesses this information by
  //! reading "OS/2" table, if available.
  _BLFontUnicodeCoverage = record
    data: array [0..3] of UInt32;
  end;

  P_anonymous_type_2 = ^_anonymous_type_2;
  _anonymous_type_2 = record
    familyKind: UInt8;
    serifStyle: UInt8;
    weight: UInt8;
    proportion: UInt8;
    contrast: UInt8;
    strokeVariation: UInt8;
    armStyle: UInt8;
    letterform: UInt8;
    midline: UInt8;
    xHeight: UInt8;
  end;

  P_anonymous_type_3 = ^_anonymous_type_3;
  _anonymous_type_3 = record
    familyKind: UInt8;
    toolKind: UInt8;
    weight: UInt8;
    spacing: UInt8;
    aspectRatio: UInt8;
    contrast: UInt8;
    topology: UInt8;
    form: UInt8;
    finials: UInt8;
    xAscent: UInt8;
  end;

  P_anonymous_type_4 = ^_anonymous_type_4;
  _anonymous_type_4 = record
    familyKind: UInt8;
    decorativeClass: UInt8;
    weight: UInt8;
    aspect: UInt8;
    contrast: UInt8;
    serifVariant: UInt8;
    treatment: UInt8;
    lining: UInt8;
    topology: UInt8;
    characterRange: UInt8;
  end;

  P_anonymous_type_5 = ^_anonymous_type_5;
  _anonymous_type_5 = record
    familyKind: UInt8;
    symbolKind: UInt8;
    weight: UInt8;
    spacing: UInt8;
    aspectRatioAndContrast: UInt8;
    aspectRatio94: UInt8;
    aspectRatio119: UInt8;
    aspectRatio157: UInt8;
    aspectRatio163: UInt8;
    aspectRatio211: UInt8;
  end;

  P_anonymous_type_6 = ^_anonymous_type_6;
  _anonymous_type_6 = record
    case Integer of
      0: (data: array [0..9] of UInt8);
      1: (familyKind: UInt8);
      2: (text: _anonymous_type_2);
      3: (script: _anonymous_type_3);
      4: (decorative: _anonymous_type_4);
      5: (symbol: _anonymous_type_5);
  end;

  //! Font PANOSE classification.
  _BLFontPanose = record
    f1: _anonymous_type_6;
  end;

  P_anonymous_type_7 = ^_anonymous_type_7;
  _anonymous_type_7 = record
    m00: Double;
    m01: Double;
    m10: Double;
    m11: Double;
  end;

  P_anonymous_type_8 = ^_anonymous_type_8;
  _anonymous_type_8 = record
    case Integer of
      0: (m: array [0..3] of Double);
      1: (f2: _anonymous_type_7);
  end;

  //! 2x2 transformation matrix used by \ref BLFont. It's similar to \ref BLMatrix2D,
  //! however, it doesn't provide a translation part as it's assumed to be zero.
  _BLFontMatrix = record
    f1: _anonymous_type_8;
  end;

  P_anonymous_type_9 = ^_anonymous_type_9;
  _anonymous_type_9 = record
    //! Font ascent (horizontal orientation).
    ascent: Single;
    //! Font ascent (vertical orientation).
    vAscent: Single;
    //! Font descent (horizontal orientation).
    descent: Single;
    //! Font descent (vertical orientation).
    vDescent: Single;
  end;

  P_anonymous_type_10 = ^_anonymous_type_10;
  _anonymous_type_10 = record
    ascentByOrientation: array [0..1] of Single;
    descentByOrientation: array [0..1] of Single;
  end;

  P_anonymous_type_11 = ^_anonymous_type_11;
  _anonymous_type_11 = record
    case Integer of
      0: (f1: _anonymous_type_9);
      1: (f2: _anonymous_type_10);
  end;

  //! Scaled \ref BLFontDesignMetrics based on font size and other properties.
  _BLFontMetrics = record
    //! Font size.
    size: Single;
    f2: _anonymous_type_11;
    //! Line gap.
    lineGap: Single;
    //! Distance between the baseline and the mean line of lower-case letters.
    xHeight: Single;
    //! Maximum height of a capital letter above the baseline.
    capHeight: Single;
    //! Minimum x, reported by the font.
    xMin: Single;
    //! Minimum y, reported by the font.
    yMin: Single;
    //! Maximum x, reported by the font.
    xMax: Single;
    //! Maximum y, reported by the font.
    yMax: Single;
    //! Text underline position.
    underlinePosition: Single;
    //! Text underline thickness.
    underlineThickness: Single;
    //! Text strikethrough position.
    strikethroughPosition: Single;
    //! Text strikethrough thickness.
    strikethroughThickness: Single;
  end;

  P_anonymous_type_12 = ^_anonymous_type_12;
  _anonymous_type_12 = record
    //! Ascent (horizontal layout).
    ascent: Integer;
    //! Ascent (vertical layout).
    vAscent: Integer;
    //! Descent (horizontal layout).
    descent: Integer;
    //! Descent (vertical layout).
    vDescent: Integer;
    //! Minimum leading-side bearing (horizontal layout).
    hMinLSB: Integer;
    //! Minimum leading-side bearing (vertical layout).
    vMinLSB: Integer;
    //! Minimum trailing-side bearing (horizontal layout).
    hMinTSB: Integer;
    //! Minimum trailing-side bearing (vertical layout).
    vMinTSB: Integer;
    //! Maximum advance (horizontal layout).
    hMaxAdvance: Integer;
    //! Maximum advance (vertical layout).
    vMaxAdvance: Integer;
  end;

  P_anonymous_type_13 = ^_anonymous_type_13;
  _anonymous_type_13 = record
    //! Horizontal & vertical ascents.
    ascentByOrientation: array [0..1] of Integer;
    //! Horizontal & vertical descents.
    descentByOrientation: array [0..1] of Integer;
    //! Minimum leading-side bearing (horizontal and vertical).
    minLSBByOrientation: array [0..1] of Integer;
    //! Minimum trailing-side bearing (horizontal and vertical)..
    minTSBByOrientation: array [0..1] of Integer;
    //! Maximum advance width (horizontal) and height (vertical).
    maxAdvanceByOrientation: array [0..1] of Integer;
  end;

  P_anonymous_type_14 = ^_anonymous_type_14;
  _anonymous_type_14 = record
    case Integer of
      0: (f1: _anonymous_type_12);
      1: (f2: _anonymous_type_13);
  end;

  //! Design metrics of a font.
  //!
  //! Design metrics is information that \ref BLFontFace collected directly from the font data. It means that all
  //! fields are measured in font design units.
  //!
  //! When a new \ref BLFont instance is created a scaled metrics \ref BLFontMetrics is automatically calculated
  //! from \ref BLFontDesignMetrics including other members like transformation, etc...
  _BLFontDesignMetrics = record
    //! Units per EM square.
    unitsPerEm: Integer;
    //! Lowest readable size in pixels.
    lowestPPEM: Integer;
    //! Line gap.
    lineGap: Integer;
    //! Distance between the baseline and the mean line of lower-case letters.
    xHeight: Integer;
    //! Maximum height of a capital letter above the baseline.
    capHeight: Integer;
    f6: _anonymous_type_14;
    //! Aggregated bounding box of all glyphs in the font.
      //!
      //! \note This value is reported by the font data so it's not granted to be true.
    glyphBoundingBox: _BLBoxI;
    //! Text underline position.
    underlinePosition: Integer;
    //! Text underline thickness.
    underlineThickness: Integer;
    //! Text strikethrough position.
    strikethroughPosition: Integer;
    //! Text strikethrough thickness.
    strikethroughThickness: Integer;
  end;

  //! Text metrics.
  _BLTextMetrics = record
    advance: _BLPoint;
    leadingBearing: _BLPoint;
    trailingBearing: _BLPoint;
    boundingBox: _BLBox;
  end;

  //! Byte string [C API].
  _BLStringCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Byte string [Impl].
  _BLStringImpl = record
    //! String size [in bytes].
    size: NativeUInt;
    //! String data capacity [in bytes].
    capacity: NativeUInt;
  end;

  //! A read only data that represents a font table or its sub-table.
  _BLFontTable = record
    //! Pointer to the beginning of the data interpreted as `uint8_t*`.
    data: PUInt8;
    //! Size of `data` in bytes.
    size: NativeUInt;
  end;

  //! Font data [C API].
  _BLFontDataCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Font data [C API Virtual Function Table].
  _BLFontDataVirt = record
    base: _BLObjectVirtBase;
    getTableTags: function(const impl: _PBLFontDataImpl; faceIndex: UInt32; &out: _PBLArrayCore): _BLResult; cdecl;
    getTables: function(const impl: _PBLFontDataImpl; faceIndex: UInt32; dst: _PBLFontTable; const tags: _PBLTag; n: NativeUInt): NativeUInt; cdecl;
  end;

  //! Font data [C API Impl].
  _BLFontDataImpl = record
    //! Virtual function table.
    virt: _PBLFontDataVirt;
    //! Type of the face that would be created with this font data.
    faceType: UInt8;
    //! Number of font faces stored in this font data instance.
    faceCount: UInt32;
    //! Font data flags.
    flags: UInt32;
  end;

  //! BLGlyphRun describes a set of consecutive glyphs and their placements.
  //!
  //! BLGlyphRun should only be used to pass glyph IDs and their placements to the rendering context. The purpose of
  //! BLGlyphRun is to allow rendering glyphs, which could be shaped by various shaping engines (Blend2D, Harfbuzz, etc).
  //!
  //! BLGlyphRun allows to render glyphs that are stored as uint32_t[] array or part of a bigger structure (for example
  //! `hb_glyph_info_t` used by HarfBuzz). Glyph placements at the moment use Blend2D's \ref BLGlyphPlacement or \ref
  //! BLPoint, but it's possible to extend the data type in the future.
  //!
  //! See `BLGlyphRunPlacement` for placement modes provided by Blend2D.
  _BLGlyphRun = record
    //! Glyph id data (abstract, incremented by `glyphAdvance`).
    glyphData: Pointer;
    //! Glyph placement data (abstract, incremented by `placementAdvance`).
    placementData: Pointer;
    //! Size of the glyph-run in glyph units.
    size: NativeUInt;
    //! Reserved for future use, muse be zero.
    reserved: UInt8;
    //! Type of placement, see \ref BLGlyphPlacementType.
    placementType: UInt8;
    //! Advance of `glyphData` array.
    glyphAdvance: Int8;
    //! Advance of `placementData` array.
    placementAdvance: Int8;
    //! Glyph-run flags.
    flags: UInt32;
  end;

  P_anonymous_type_15 = ^_anonymous_type_15;
  _anonymous_type_15 = record
    //! Text (UCS4 code-points) or glyph content.
    content: PUInt32;
    //! Glyph placement data.
    placementData: _PBLGlyphPlacement;
    //! Number of either code points or glyph indexes in the glyph-buffer.
    size: NativeUInt;
    //! Reserved, used exclusively by BLGlyphRun.
    reserved: UInt32;
    //! Flags shared between BLGlyphRun and BLGlyphBuffer.
    flags: UInt32;
  end;

  P_anonymous_type_16 = ^_anonymous_type_16;
  _anonymous_type_16 = record
    case Integer of
      0: (f1: _anonymous_type_15);
      1: (//! Glyph run data that can be passed directly to the rendering context.
        //!
        //! Glyph run shares data with other members like `content`, `placementData`, `size`, and `flags`. When working
        //! with data it's better to access these members directly as they are typed, whereas \ref BLGlyphRun stores
        //! pointers as `const void*` as it offers more flexibility, which \ref BLGlyphRun doesn't need.
    glyphRun: _BLGlyphRun);
  end;

  //! Glyph buffer [Impl].
  //!
  //! \note This is not a `BLObjectImpl` compatible Impl.
  _BLGlyphBufferImpl = record
    f1: _anonymous_type_16;
    //! Glyph info data - additional information of each code-point or glyph.
    infoData: _PBLGlyphInfo;
  end;

  //! Glyph buffer [C API].
  _BLGlyphBufferCore = record
    impl: _PBLGlyphBufferImpl;
  end;

  //! Options used to describe how geometry is approximated.
  //!
  //! This struct cannot be simply zeroed and then passed to functions that accept approximation options.
  //! Use `blDefaultApproximationOptions` to setup defaults and then alter values you want to change.
  //!
  //! Example of using `BLApproximationOptions`:
  //!
  //! ```
  //! // Initialize with defaults first.
  //! BLApproximationOptions approx = blDefaultApproximationOptions;
  //!
  //! // Override values you want to change.
  //! approx.simplifyTolerance = 0.02;
  //!
  //! // ... now safely use approximation options in your code ...
  //! ```
  _BLApproximationOptions = record
    //! Specifies how curves are flattened, see \ref BLFlattenMode.
    flattenMode: UInt8;
    //! Specifies how curves are offsetted (used by stroking), see \ref BLOffsetMode.
    offsetMode: UInt8;
    //! Reserved for future use, must be zero.
    reservedFlags: array [0..5] of UInt8;
    //! Tolerance used to flatten curves.
    flattenTolerance: Double;
    //! Tolerance used to approximate cubic curves with quadratic curves.
    simplifyTolerance: Double;
    //! Curve offsetting parameter, exact meaning depends on `offsetMode`.
    offsetParameter: Double;
  end;

  //! 2D vector path view provides pointers to vertex and command data along with their size.
  _BLPathView = record
    commandData: PUInt8;
    vertexData: _PBLPoint;
    size: NativeUInt;
  end;

  //! Optional callback that can be used to consume a path data.
  _BLPathSinkFunc = function(path: _PBLPathCore; const info: Pointer; userData: Pointer): _BLResult; cdecl;

  //! This is a sink that is used by path offsetting. This sink consumes both `a` and `b` offsets of the path. The sink
  //! will be called for each figure and is responsible for joining these paths. If the paths are not closed then the
  //! sink must insert start cap, then join `b`, and then insert end cap.
  //!
  //! The sink must also clean up the paths as this is not done by the offsetter. The reason is that in case the `a` path
  //! is the output path you can just keep it and insert `b` path into it (clearing only `b` path after each call).
  _BLPathStrokeSinkFunc = function(a: _PBLPathCore; b: _PBLPathCore; c: _PBLPathCore; inputStart: NativeUInt; inputEnd: NativeUInt; userData: Pointer): _BLResult; cdecl;

  //! 2D vector path [C API].
  _BLPathCore = record
    _d: _BLObjectDetail;
  end;

  P_anonymous_type_17 = ^_anonymous_type_17;
  _anonymous_type_17 = record
    startCap: UInt8;
    endCap: UInt8;
    join: UInt8;
    transformOrder: UInt8;
    reserved: array [0..3] of UInt8;
  end;

  P_anonymous_type_18 = ^_anonymous_type_18;
  _anonymous_type_18 = record
    case Integer of
      0: (f1: _anonymous_type_17);
      1: (caps: array [0..1] of UInt8);
      2: (hints: UInt64);
  end;

  //! Stroke options [C API].
  _BLStrokeOptionsCore = record
    f1: _anonymous_type_18;
    width: Double;
    miterLimit: Double;
    dashOffset: Double;
    dashArray: _BLArrayCore;
  end;

  P_anonymous_type_19 = ^_anonymous_type_19;
  _anonymous_type_19 = record
    //! Command data
    commandData: PUInt8;
    //! Vertex data.
    vertexData: _PBLPoint;
    //! Vertex/command count.
    size: NativeUInt;
  end;

  //! Union of either raw path-data or their `view`.
  P_anonymous_type_20 = ^_anonymous_type_20;
  _anonymous_type_20 = record
    case Integer of
      0: (f1: _anonymous_type_19);
      1: (//! Path data as view.
    view: _BLPathView);
  end;

  //! 2D vector path [Impl].
  _BLPathImpl = record
    f1: _anonymous_type_20;
    //! Path vertex/command capacity.
    capacity: NativeUInt;
    //! Path flags related to caching.
    flags: UInt32;
  end;

  //! Information of \ref BLFontFace.
  _BLFontFaceInfo = record
    //! Font face type, see \ref BLFontFaceType.
    faceType: UInt8;
    //! Type of outlines used by the font face, see \ref BLFontOutlineType.
    outlineType: UInt8;
    //! Reserved fields.
    reserved8: array [0..1] of UInt8;
    //! Number of glyphs provided by this font face.
    glyphCount: UInt32;
    //! Revision (read from 'head' table, represented as 16.16 fixed point).
    revision: UInt32;
    //! Face face index in a TTF/OTF collection or zero if not part of a collection.
    faceIndex: UInt32;
    //! Font face flags, see \ref BLFontFaceFlags
    faceFlags: UInt32;
    //! Font face diagnostic flags, see \ref BLFontFaceDiagFlags.
    diagFlags: UInt32;
    //! Reserved for future use, set to zero.
    reserved: array [0..1] of UInt32;
  end;

  //! Font face [C API].
  _BLFontFaceCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Font face [C API Virtual Function Table].
  _BLFontFaceVirt = record
    base: _BLObjectVirtBase;
  end;

  //! Font face [C API Impl].
  _BLFontFaceImpl = record
    //! Virtual function table.
    virt: _PBLFontFaceVirt;
    //! Font face default weight (1..1000) [0 if font face is not initialized].
    weight: UInt16;
    //! Font face default stretch (1..9) [0 if font face is not initialized].
    stretch: UInt8;
    //! Font face default style.
    style: UInt8;
    //! Font face information.
    faceInfo: _BLFontFaceInfo;
    //! Unique identifier assigned by Blend2D that can be used for caching.
    uniqueId: _BLUniqueId;
    //! Font data.
    data: _BLFontDataCore;
    //! Full name.
    fullName: _BLStringCore;
    //! Family name.
    familyName: _BLStringCore;
    //! Subfamily name.
    subfamilyName: _BLStringCore;
    //! PostScript name.
    postScriptName: _BLStringCore;
    //! Font face metrics in design units.
    designMetrics: _BLFontDesignMetrics;
    //! Font face unicode coverage (specified in OS/2 header).
    unicodeCoverage: _BLFontUnicodeCoverage;
    //! Font face panose classification.
    panose: _BLFontPanose;
  end;

  //! Font feature settings [C API].
  _BLFontFeatureSettingsCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Font feature settings [C API Impl].
  //!
  //! \note This Impl's layout is fully compatible with \ref BLArrayImpl.
  _BLFontFeatureSettingsImpl = record
    //! Pointer to feature items.
    data: _PBLFontFeatureItem;
    //! Number of feature items in `data`.
    size: NativeUInt;
    //! Capacity of `data`.
    capacity: NativeUInt;
  end;

  //! Associates a font feature tag with a value. Tag describes the feature (as provided by the font) and `value`
  //! describes its value. Some features only allow boolean values 0 and 1 and some allow values up to 65535.
  //! Values above 65535 are invalid, however, only \ref BL_FONT_FEATURE_INVALID_VALUE should be used as invalid
  //! value in general.
  //!
  //! Registered OpenType features:
  //!   - https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags
  //!   - https://helpx.adobe.com/typekit/using/open-type-syntax.html
  _BLFontFeatureItem = record
    //! Feature tag (32-bit).
    tag: _BLTag;
    //! Feature value.
      //!
      //! \note values greater than 65535 are invalid.
    value: UInt32;
  end;

  //! A view unifying the representation of an internal storage used by \ref BLFontFeatureSettings.
  _BLFontFeatureSettingsView = record
    //! Pointer to font feature items, where each item describes a tag and its value.
      //!
      //! \note If the container is in SSO mode the `data` member will point to `ssoData`.
    data: _PBLFontFeatureItem;
    //! Count of items in `data.
    size: NativeUInt;
    //! Unpacked SSO items into \ref BLFontFeatureItem array.
      //!
      //! \note This member won't be initialized or zeroed in case \ref BLFontFeatureSettings is not in SSO mode. And if the
      //! container is in SSO mode only the number of items used will be overwritten by \ref BLFontFeatureSettings::getView().
    ssoData: array [0..35] of _BLFontFeatureItem;
  end;

  //! Font variation settings [C API].
  _BLFontVariationSettingsCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Font variation settings [C API Impl].
  //!
  //! \note This Impl's layout is fully compatible with \ref BLArrayImpl.
  _BLFontVariationSettingsImpl = record
    //! Pointer to variation items.
    data: _PBLFontVariationItem;
    //! Number of variation items in `data`.
    size: NativeUInt;
    //! Capacity of `data`.
    capacity: NativeUInt;
  end;

  //! Associates a font variation tag with a value.
  _BLFontVariationItem = record
    //! Variation tag (32-bit).
    tag: _BLTag;
    //! Variation value.
      //!
      //! \note values outside of [0, 1] range are invalid.
    value: Single;
  end;

  //! A view unifying the representation of an internal storage used by \ref BLFontVariationSettings.
  _BLFontVariationSettingsView = record
    //! Pointer to font variation items, where each item describes a variation tag and its value.
      //!
      //! \note If the container is in SSO mode the `data` member will point to `ssoData`.
    data: _PBLFontVariationItem;
    //! Count of items in `data.
    size: NativeUInt;
    //! Unpacked SSO items into \ref BLFontVariationItem array.
      //!
      //! \note This member won't be initialized or zeroed in case \ref BLFontVariationSettings is not in
      //! SSO mode. And if the container is in SSO mode only the number of items used will be overwritten
      //! by \ref BLFontVariationSettings::getView().
    ssoData: array [0..2] of _BLFontVariationItem;
  end;

  //! Font [C API].
  _BLFontCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Font [C API Impl].
  _BLFontImpl = record
    //! Font face used by this font.
    face: _BLFontFaceCore;
    //! Font width (1..1000) [0 if the font is not initialized].
    weight: UInt16;
    //! Font stretch (1..9) [0 if the font is not initialized].
    stretch: UInt8;
    //! Font style.
    style: UInt8;
    //! Reserved for future use.
    reserved: UInt32;
    //! Font metrics.
    metrics: _BLFontMetrics;
    //! Font matrix.
    matrix: _BLFontMatrix;
    //! Assigned font features (key/value pairs).
    featureSettings: _BLFontFeatureSettingsCore;
    //! Assigned font variations (key/value pairs).
    variationSettings: _BLFontVariationSettingsCore;
  end;

  //! Matrix values that map `m` to named values that can be used directly.
  P_anonymous_type_21 = ^_anonymous_type_21;
  _anonymous_type_21 = record
    m00: Double;
    m01: Double;
    m10: Double;
    m11: Double;
    m20: Double;
    m21: Double;
  end;

  P_anonymous_type_22 = ^_anonymous_type_22;
  _anonymous_type_22 = record
    case Integer of
      0: (//! Matrix values stored in array.
    m: array [0..5] of Double);
      1: (f2: _anonymous_type_21);
  end;

  //! 2D matrix represents an affine transformation matrix that can be used to transform geometry and images.
  _BLMatrix2D = record
    f1: _anonymous_type_22;
  end;

  //! Defines an `offset` and `rgba` color that us used by \ref BLGradient to define a linear transition between colors.
  _BLGradientStop = record
    offset: Double;
    rgba: _BLRgba64;
  end;

  //! Linear gradient values packed into a structure.
  _BLLinearGradientValues = record
    x0: Double;
    y0: Double;
    x1: Double;
    y1: Double;
  end;

  //! Radial gradient values packed into a structure.
  _BLRadialGradientValues = record
    x0: Double;
    y0: Double;
    x1: Double;
    y1: Double;
    r0: Double;
    r1: Double;
  end;

  //! Conic gradient values packed into a structure.
  _BLConicGradientValues = record
    x0: Double;
    y0: Double;
    angle: Double;
    &repeat: Double;
  end;

  //! Gradient [C API].
  _BLGradientCore = record
    _d: _BLObjectDetail;
  end;

  P_anonymous_type_23 = ^_anonymous_type_23;
  _anonymous_type_23 = record
    case Integer of
      0: (//! Gradient values (coordinates, radius, angle).
    values: array [0..5] of Double);
      1: (//! Linear parameters.
    linear: _BLLinearGradientValues);
      2: (//! Radial parameters.
    radial: _BLRadialGradientValues);
      3: (//! Conic parameters.
    conic: _BLConicGradientValues);
  end;

  //! \cond INTERNAL
  //! Gradient [C API Impl].
  _BLGradientImpl = record
    //! Gradient stop data.
    stops: _PBLGradientStop;
    //! Gradient stop count.
    size: NativeUInt;
    //! Stop capacity.
    capacity: NativeUInt;
    //! Gradient transformation matrix.
    transform: _BLMatrix2D;
    f5: _anonymous_type_23;
  end;

  P_anonymous_type_24 = ^_anonymous_type_24;
  _anonymous_type_24 = record
    sizes: array [0..3] of UInt8;
    shifts: array [0..3] of UInt8;
  end;

  P_anonymous_type_25 = ^_anonymous_type_25;
  _anonymous_type_25 = record
    rSize: UInt8;
    gSize: UInt8;
    bSize: UInt8;
    aSize: UInt8;
    rShift: UInt8;
    gShift: UInt8;
    bShift: UInt8;
    aShift: UInt8;
  end;

  P_anonymous_type_26 = ^_anonymous_type_26;
  _anonymous_type_26 = record
    case Integer of
      0: (f1: _anonymous_type_24);
      1: (f2: _anonymous_type_25);
      2: (palette: _PBLRgba32);
  end;

  //! Provides a detailed information about a pixel format. Use \ref blFormatInfo array to get an information of Blend2D
  //! native pixel formats.
  _BLFormatInfo = record
    depth: UInt32;
    flags: _BLFormatFlags;
    f3: _anonymous_type_26;
  end;

  //! Image codec [C API].
  _BLImageCodecCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond
  //! Image codec [C API Virtual Function Table].
  _BLImageCodecVirt = record
    base: _BLObjectVirtBase;
    inspectData: function(const impl: _PBLImageCodecImpl; const data: PUInt8; size: NativeUInt): UInt32; cdecl;
    createDecoder: function(const impl: _PBLImageCodecImpl; dst: _PBLImageDecoderCore): _BLResult; cdecl;
    createEncoder: function(const impl: _PBLImageCodecImpl; dst: _PBLImageEncoderCore): _BLResult; cdecl;
  end;

  //! Image codec [C API Impl].
  _BLImageCodecImpl = record
    //! Virtual function table.
    virt: _PBLImageCodecVirt;
    //! Image codec name like "PNG", "JPEG", etc...
    name: _BLStringCore;
    //! Image codec vendor string, built-in codecs use "Blend2D" as a vendor string.
    vendor: _BLStringCore;
    //! Mime types.
    mimeType: _BLStringCore;
    //! Known file extensions used by this image codec separated by "|".
    extensions: _BLStringCore;
    //! Image codec features.
    features: UInt32;
  end;

  //! Data that describes a raster image. Used by \ref BLImage.
  _BLImageData = record
    //! Pixel data, starting at the top left corner of the image.
      //!
      //! \note If the stride is negative the image data would start at the bottom.
    pixelData: Pointer;
    //! Stride (in bytes) of image data (positive when image data starts at top-left, negative when it starts at
      //! bottom-left).
    stride: IntPtr;
    //! Size of the image.
    size: _BLSizeI;
    //! Pixel format, see \ref BLFormat.
    format: UInt32;
    flags: UInt32;
  end;

  //! Image information provided by image codecs.
  _BLImageInfo = record
    //! Image size.
    size: _BLSizeI;
    //! Pixel density per one meter, can contain fractions.
    density: _BLSize;
    //! Image flags.
    flags: UInt32;
    //! Image depth.
    depth: UInt16;
    //! Number of planes.
    planeCount: UInt16;
    //! Number of frames (0 = unknown/unspecified).
    frameCount: UInt64;
    //! Number of animation repeats (0 == infinite).
    repeatCount: UInt32;
    //! Reserved for future use.
    reserved: array [0..2] of UInt32;
    //! Image format (as understood by codec).
    format: array [0..15] of UTF8Char;
    //! Image compression (as understood by codec).
    compression: array [0..15] of UTF8Char;
  end;

  //! 2D raster image [C API].
  _BLImageCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! 2D raster image [C API Impl].
  _BLImageImpl = record
    //! Pixel data.
    pixelData: Pointer;
    //! Image stride.
    stride: IntPtr;
    //! Image size.
    size: _BLSizeI;
    //! Image format.
    format: UInt8;
    //! Image flags.
    flags: UInt8;
    //! Image depth (in bits).
    depth: UInt16;
    //! Reserved for future use, must be zero.
    reserved: array [0..3] of UInt8;
  end;

  //! Pattern [C API].
  _BLPatternCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Pattern [C API Impl].
  //!
  //! The following properties are stored in BLObjectInfo:
  //!
  //!   - Pattern extend mode is stored in BLObjectInfo's 'b' field.
  //!   - Pattern matrix type is stored in BLObjectInfo's 'c' field.
  _BLPatternImpl = record
    //! Image used by the pattern.
    image: _BLImageCore;
    //! Image area to use.
    area: _BLRectI;
    //! Pattern transformation matrix.
    transform: _BLMatrix2D;
  end;

  //! Variant [C API].
  _BLVarCore = record
    _d: _BLObjectDetail;
  end;

  //! Information that can be used to customize the rendering context.
  _BLContextCreateInfo = record
    //! Create flags, see \ref BLContextCreateFlags.
    flags: UInt32;
    //! Number of worker threads to use for asynchronous rendering, if non-zero.
      //!
      //! If `threadCount` is zero it means to initialize the context for synchronous rendering. This means that every
      //! operation will take effect immediately. If `threadCount` is `1` it means that the rendering will be asynchronous,
      //! but no thread would be acquired from a thread-pool, because the user thread will be used as a worker. And
      //! finally, if `threadCount` is greater than `1` then total of `threadCount - 1` threads will be acquired from
      //! thread-pool and used as additional workers.
    threadCount: UInt32;
    //! CPU features to use in isolated JIT runtime (if supported), only used when `flags` contains
      //! \ref BL_CONTEXT_CREATE_FLAG_OVERRIDE_CPU_FEATURES.
    cpuFeatures: UInt32;
    //! Maximum number of commands to be queued.
      //!
      //! If this parameter is zero the queue size will be determined automatically.
      //!
      //! TODO: To be documented, has no effect at the moment.
    commandQueueLimit: UInt32;
    //! Maximum number of saved states.
      //!
      //! \note Zero value tells the rendering engine to use the default saved state limit, which currently defaults
      //! to 4096 states. This option allows to even increase or decrease the limit, depending on the use case.
    savedStateLimit: UInt32;
    //! Pixel origin.
      //!
      //! Pixel origin is an offset in pixel units that can be used as an origin for fetchers and effects that use a pixel
      //! X/Y coordinate in the calculation. One example of using pixel origin is dithering, where it's used to shift the
      //! dithering matrix.
    pixelOrigin: _BLPointI;
    //! Reserved for future use, must be zero.
    reserved: array [0..0] of UInt32;
  end;

  //! Holds an arbitrary 128-bit value (cookie) that can be used to match other cookies. Blend2D uses cookies in places
  //! where it allows to "lock" some state that can only be unlocked by a matching cookie. Please don't confuse cookies
  //! with a security of any kind, it's just an arbitrary data that must match to proceed with a certain operation.
  //!
  //! Cookies can be used with \ref BLContext::save() and \ref BLContext::restore() operations.
  _BLContextCookie = record
    data: array [0..1] of UInt64;
  end;

  P_anonymous_type_27 = ^_anonymous_type_27;
  _anonymous_type_27 = record
    renderingQuality: UInt8;
    gradientQuality: UInt8;
    patternQuality: UInt8;
  end;

  P_anonymous_type_28 = ^_anonymous_type_28;
  _anonymous_type_28 = record
    case Integer of
      0: (f1: _anonymous_type_27);
      1: (hints: array [0..7] of UInt8);
  end;

  //! Rendering context hints.
  _BLContextHints = record
    f1: _anonymous_type_28;
  end;

  //! Rendering context [C API].
  _BLContextCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Rendering context [Virtual Function Table].
  _BLContextVirt = record
    base: _BLObjectVirtBase;
    applyTransformOp: function(impl: _PBLContextImpl; opType: _BLTransformOp; const opData: Pointer): _BLResult; cdecl;
    fillRectI: function(impl: _PBLContextImpl; const rect: _PBLRectI): _BLResult; cdecl;
    fillRectIRgba32: function(impl: _PBLContextImpl; const rect: _PBLRectI; rgba32: UInt32): _BLResult; cdecl;
    fillRectIExt: function(impl: _PBLContextImpl; const rect: _PBLRectI; const style: _PBLObjectCore): _BLResult; cdecl;
    fillRectD: function(impl: _PBLContextImpl; const rect: _PBLRect): _BLResult; cdecl;
    fillRectDRgba32: function(impl: _PBLContextImpl; const rect: _PBLRect; rgba32: UInt32): _BLResult; cdecl;
    fillRectDExt: function(impl: _PBLContextImpl; const rect: _PBLRect; const style: _PBLObjectCore): _BLResult; cdecl;
    fillPathD: function(impl: _PBLContextImpl; const origin: _PBLPoint; const path: _PBLPathCore): _BLResult; cdecl;
    fillPathDRgba32: function(impl: _PBLContextImpl; const origin: _PBLPoint; const path: _PBLPathCore; rgba32: UInt32): _BLResult; cdecl;
    fillPathDExt: function(impl: _PBLContextImpl; const origin: _PBLPoint; const path: _PBLPathCore; const style: _PBLObjectCore): _BLResult; cdecl;
    blitImageI: function(impl: _PBLContextImpl; const origin: _PBLPointI; const img: _PBLImageCore; const imgArea: _PBLRectI): _BLResult; cdecl;
    blitScaledImageI: function(impl: _PBLContextImpl; const rect: _PBLRectI; const img: _PBLImageCore; const imgArea: _PBLRectI): _BLResult; cdecl;
    flush: function(impl: _PBLContextImpl; flags: _BLContextFlushFlags): _BLResult; cdecl;
    save: function(impl: _PBLContextImpl; cookie: _PBLContextCookie): _BLResult; cdecl;
    restore: function(impl: _PBLContextImpl; const cookie: _PBLContextCookie): _BLResult; cdecl;
    userToMeta: function(impl: _PBLContextImpl): _BLResult; cdecl;
    setHint: function(impl: _PBLContextImpl; hintType: _BLContextHint; value: UInt32): _BLResult; cdecl;
    setHints: function(impl: _PBLContextImpl; const hints: _PBLContextHints): _BLResult; cdecl;
    setFlattenMode: function(impl: _PBLContextImpl; mode: _BLFlattenMode): _BLResult; cdecl;
    setFlattenTolerance: function(impl: _PBLContextImpl; tolerance: Double): _BLResult; cdecl;
    setApproximationOptions: function(impl: _PBLContextImpl; const options: _PBLApproximationOptions): _BLResult; cdecl;
    getStyle: function(const impl: _PBLContextImpl; slot: _BLContextStyleSlot; transformed: Boolean; styleOut: _PBLVarCore): _BLResult; cdecl;
    setStyle: function(impl: _PBLContextImpl; slot: _BLContextStyleSlot; const style: _PBLObjectCore; transformMode: _BLContextStyleTransformMode): _BLResult; cdecl;
    setStyleRgba: function(impl: _PBLContextImpl; slot: _BLContextStyleSlot; const rgba: _PBLRgba): _BLResult; cdecl;
    setStyleRgba32: function(impl: _PBLContextImpl; slot: _BLContextStyleSlot; rgba32: UInt32): _BLResult; cdecl;
    setStyleRgba64: function(impl: _PBLContextImpl; slot: _BLContextStyleSlot; rgba64: UInt64): _BLResult; cdecl;
    disableStyle: function(impl: _PBLContextImpl; slot: _BLContextStyleSlot): _BLResult; cdecl;
    setStyleAlpha: function(impl: _PBLContextImpl; slot: _BLContextStyleSlot; alpha: Double): _BLResult; cdecl;
    swapStyles: function(impl: _PBLContextImpl; mode: _BLContextStyleSwapMode): _BLResult; cdecl;
    setGlobalAlpha: function(impl: _PBLContextImpl; alpha: Double): _BLResult; cdecl;
    setCompOp: function(impl: _PBLContextImpl; compOp: _BLCompOp): _BLResult; cdecl;
    setFillRule: function(impl: _PBLContextImpl; fillRule: _BLFillRule): _BLResult; cdecl;
    setStrokeWidth: function(impl: _PBLContextImpl; width: Double): _BLResult; cdecl;
    setStrokeMiterLimit: function(impl: _PBLContextImpl; miterLimit: Double): _BLResult; cdecl;
    setStrokeCap: function(impl: _PBLContextImpl; position: _BLStrokeCapPosition; strokeCap: _BLStrokeCap): _BLResult; cdecl;
    setStrokeCaps: function(impl: _PBLContextImpl; strokeCap: _BLStrokeCap): _BLResult; cdecl;
    setStrokeJoin: function(impl: _PBLContextImpl; strokeJoin: _BLStrokeJoin): _BLResult; cdecl;
    setStrokeDashOffset: function(impl: _PBLContextImpl; dashOffset: Double): _BLResult; cdecl;
    setStrokeDashArray: function(impl: _PBLContextImpl; const dashArray: _PBLArrayCore): _BLResult; cdecl;
    setStrokeTransformOrder: function(impl: _PBLContextImpl; transformOrder: _BLStrokeTransformOrder): _BLResult; cdecl;
    setStrokeOptions: function(impl: _PBLContextImpl; const options: _PBLStrokeOptionsCore): _BLResult; cdecl;
    clipToRectI: function(impl: _PBLContextImpl; const rect: _PBLRectI): _BLResult; cdecl;
    clipToRectD: function(impl: _PBLContextImpl; const rect: _PBLRect): _BLResult; cdecl;
    restoreClipping: function(impl: _PBLContextImpl): _BLResult; cdecl;
    clearAll: function(impl: _PBLContextImpl): _BLResult; cdecl;
    clearRectI: function(impl: _PBLContextImpl; const rect: _PBLRectI): _BLResult; cdecl;
    clearRectD: function(impl: _PBLContextImpl; const rect: _PBLRect): _BLResult; cdecl;
    fillAll: function(impl: _PBLContextImpl): _BLResult; cdecl;
    fillAllRgba32: function(impl: _PBLContextImpl; rgba32: UInt32): _BLResult; cdecl;
    fillAllExt: function(impl: _PBLContextImpl; const style: _PBLObjectCore): _BLResult; cdecl;
    fillGeometry: function(impl: _PBLContextImpl; &type: _BLGeometryType; const data: Pointer): _BLResult; cdecl;
    fillGeometryRgba32: function(impl: _PBLContextImpl; &type: _BLGeometryType; const data: Pointer; rgba32: UInt32): _BLResult; cdecl;
    fillGeometryExt: function(impl: _PBLContextImpl; &type: _BLGeometryType; const data: Pointer; const style: _PBLObjectCore): _BLResult; cdecl;
    fillTextOpI: function(self: _PBLContextImpl; const origin: _PBLPointI; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer): _BLResult; cdecl;
    fillTextOpIRgba32: function(self: _PBLContextImpl; const origin: _PBLPointI; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; rgba32: UInt32): _BLResult; cdecl;
    fillTextOpIExt: function(self: _PBLContextImpl; const origin: _PBLPointI; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; const style: _PBLObjectCore): _BLResult; cdecl;
    fillTextOpD: function(self: _PBLContextImpl; const origin: _PBLPoint; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer): _BLResult; cdecl;
    fillTextOpDRgba32: function(self: _PBLContextImpl; const origin: _PBLPoint; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; rgba32: UInt32): _BLResult; cdecl;
    fillTextOpDExt: function(self: _PBLContextImpl; const origin: _PBLPoint; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; const style: _PBLObjectCore): _BLResult; cdecl;
    fillMaskI: function(impl: _PBLContextImpl; const origin: _PBLPointI; const mask: _PBLImageCore; const maskArea: _PBLRectI): _BLResult; cdecl;
    fillMaskIRgba32: function(impl: _PBLContextImpl; const origin: _PBLPointI; const mask: _PBLImageCore; const maskArea: _PBLRectI; rgba32: UInt32): _BLResult; cdecl;
    fillMaskIExt: function(impl: _PBLContextImpl; const origin: _PBLPointI; const mask: _PBLImageCore; const maskArea: _PBLRectI; const style: _PBLObjectCore): _BLResult; cdecl;
    fillMaskD: function(impl: _PBLContextImpl; const origin: _PBLPoint; const mask: _PBLImageCore; const maskArea: _PBLRectI): _BLResult; cdecl;
    fillMaskDRgba32: function(impl: _PBLContextImpl; const origin: _PBLPoint; const mask: _PBLImageCore; const maskArea: _PBLRectI; rgba32: UInt32): _BLResult; cdecl;
    fillMaskDExt: function(impl: _PBLContextImpl; const origin: _PBLPoint; const mask: _PBLImageCore; const maskArea: _PBLRectI; const style: _PBLObjectCore): _BLResult; cdecl;
    strokePathD: function(impl: _PBLContextImpl; const origin: _PBLPoint; const path: _PBLPathCore): _BLResult; cdecl;
    strokePathDRgba32: function(impl: _PBLContextImpl; const origin: _PBLPoint; const path: _PBLPathCore; rgba32: UInt32): _BLResult; cdecl;
    strokePathDExt: function(impl: _PBLContextImpl; const origin: _PBLPoint; const path: _PBLPathCore; const style: _PBLObjectCore): _BLResult; cdecl;
    strokeGeometry: function(impl: _PBLContextImpl; &type: _BLGeometryType; const data: Pointer): _BLResult; cdecl;
    strokeGeometryRgba32: function(impl: _PBLContextImpl; &type: _BLGeometryType; const data: Pointer; rgba32: UInt32): _BLResult; cdecl;
    strokeGeometryExt: function(impl: _PBLContextImpl; &type: _BLGeometryType; const data: Pointer; const style: _PBLObjectCore): _BLResult; cdecl;
    strokeTextOpI: function(self: _PBLContextImpl; const origin: _PBLPointI; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer): _BLResult; cdecl;
    strokeTextOpIRgba32: function(self: _PBLContextImpl; const origin: _PBLPointI; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; rgba32: UInt32): _BLResult; cdecl;
    strokeTextOpIExt: function(self: _PBLContextImpl; const origin: _PBLPointI; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; const style: _PBLObjectCore): _BLResult; cdecl;
    strokeTextOpD: function(self: _PBLContextImpl; const origin: _PBLPoint; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer): _BLResult; cdecl;
    strokeTextOpDRgba32: function(self: _PBLContextImpl; const origin: _PBLPoint; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; rgba32: UInt32): _BLResult; cdecl;
    strokeTextOpDExt: function(self: _PBLContextImpl; const origin: _PBLPoint; const font: _PBLFontCore; op: _BLContextRenderTextOp; const data: Pointer; const style: _PBLObjectCore): _BLResult; cdecl;
    blitImageD: function(impl: _PBLContextImpl; const origin: _PBLPoint; const img: _PBLImageCore; const imgArea: _PBLRectI): _BLResult; cdecl;
    blitScaledImageD: function(impl: _PBLContextImpl; const rect: _PBLRect; const img: _PBLImageCore; const imgArea: _PBLRectI): _BLResult; cdecl;
  end;

  //! Rendering context state.
  //!
  //! This state is not meant to be created by users, it's only provided for users that want to introspect
  //! the rendering context state and for C++ API that accesses it directly for performance reasons.
  _BLContextState = record
    //! Target image or image object with nullptr impl in case that the rendering context doesn't render to an image.
    targetImage: _PBLImageCore;
    //! Current size of the target in abstract units, pixels if rendering to \ref BLImage.
    targetSize: _BLSize;
    //! Current rendering context hints.
    hints: _BLContextHints;
    //! Current composition operator.
    compOp: UInt8;
    //! Current fill rule.
    fillRule: UInt8;
    //! Current type of a style object of fill and stroke operations indexed by \ref BLContextStyleSlot.
    styleType: array [0..1] of UInt8;
    //! Count of saved states in the context.
    savedStateCount: UInt32;
    //! Current global alpha value [0, 1].
    globalAlpha: Double;
    //! Current fill or stroke alpha indexed by style slot, see \ref BLContextStyleSlot.
    styleAlpha: array [0..1] of Double;
    //! Current stroke options.
    strokeOptions: _BLStrokeOptionsCore;
    //! Current approximation options.
    approximationOptions: _BLApproximationOptions;
    //! Current meta transformation matrix.
    metaTransform: _BLMatrix2D;
    //! Current user transformation matrix.
    userTransform: _BLMatrix2D;
    //! Current final transformation matrix, which combines all transformation matrices.
    finalTransform: _BLMatrix2D;
  end;

  //! Rendering context [C API Impl].
  _BLContextImpl = record
    //! Virtual function table.
    virt: _PBLContextVirt;
    //! Current state of the context.
    state: _PBLContextState;
    //! Type of the rendering context, see \ref BLContextType.
    contextType: UInt32;
  end;

  //! Font manager [C API].
  _BLFontManagerCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Font manager [C API Virtual Function Table].
  _BLFontManagerVirt = record
    base: _BLObjectVirtBase;
  end;

  //! Font manager [C API Impl].
  _BLFontManagerImpl = record
    //! Virtual function table.
    virt: _PBLFontManagerVirt;
  end;

  //! Properties that can be used to query \ref BLFont and \ref BLFontFace.
  //!
  //! \sa BLFontManager.
  _BLFontQueryProperties = record
    //! Font style.
    style: UInt32;
    //! Font weight.
    weight: UInt32;
    //! Font stretch.
    stretch: UInt32;
  end;

  //! Image decoder [C API]
  _BLImageDecoderCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Image decoder [C API Virtual Function Table].
  _BLImageDecoderVirt = record
    base: _BLObjectVirtBase;
    restart: function(impl: _PBLImageDecoderImpl): _BLResult; cdecl;
    readInfo: function(impl: _PBLImageDecoderImpl; infoOut: _PBLImageInfo; const data: PUInt8; size: NativeUInt): _BLResult; cdecl;
    readFrame: function(impl: _PBLImageDecoderImpl; imageOut: _PBLImageCore; const data: PUInt8; size: NativeUInt): _BLResult; cdecl;
  end;

  //! Image decoder [C API Impl].
  _BLImageDecoderImpl = record
    //! Virtual function table.
    virt: _PBLImageDecoderVirt;
    //! Image codec that created this decoder.
    codec: _BLImageCodecCore;
    //! Last faulty result (if failed).
    lastResult: _BLResult;
    //! Handle in case that this decoder wraps a third-party library.
    handle: Pointer;
    //! Current frame index.
    frameIndex: UInt64;
    //! Position in source buffer.
    bufferIndex: NativeUInt;
  end;

  //! Image encoder [C API].
  _BLImageEncoderCore = record
    _d: _BLObjectDetail;
  end;

  //! \cond INTERNAL
  //! Image encoder [Virtual Function Table].
  _BLImageEncoderVirt = record
    base: _BLObjectVirtBase;
    restart: function(impl: _PBLImageEncoderImpl): _BLResult; cdecl;
    writeFrame: function(impl: _PBLImageEncoderImpl; dst: _PBLArrayCore; const image: _PBLImageCore): _BLResult; cdecl;
  end;

  //! Image encoder [Impl].
  _BLImageEncoderImpl = record
    //! Virtual function table.
    virt: _PBLImageEncoderVirt;
    //! Image codec that created this encoder.
    codec: _BLImageCodecCore;
    //! Last faulty result (if failed).
    lastResult: _BLResult;
    //! Handle in case that this encoder wraps a third-party library.
    handle: Pointer;
    //! Current frame index.
    frameIndex: UInt64;
    //! Position in source buffer.
    bufferIndex: NativeUInt;
  end;

  //! Pixel converter function.
  _BLPixelConverterFunc = function(const self: _PBLPixelConverterCore; dstData: PUInt8; dstStride: IntPtr; const srcData: PUInt8; srcStride: IntPtr; w: UInt32; h: UInt32; const options: _PBLPixelConverterOptions): _BLResult; cdecl;

  //! Pixel conversion options.
  _BLPixelConverterOptions = record
    origin: _BLPointI;
    gap: NativeUInt;
  end;

  P_anonymous_type_29 = ^_anonymous_type_29;
  _anonymous_type_29 = record
    //! Converter function.
    convertFunc: _BLPixelConverterFunc;
    //! Internal flags used by the converter - non-zero value means initialized.
    internalFlags: UInt8;
  end;

  P_anonymous_type_30 = ^_anonymous_type_30;
  _anonymous_type_30 = record
    case Integer of
      0: (f1: _anonymous_type_29);
      1: (//! Internal data not exposed to users, aligned to sizeof(void*).
    data: array [0..79] of UInt8);
  end;

  //! Pixel converter [C API].
  _BLPixelConverterCore = record
    f1: _anonymous_type_30;
  end;

  //! Simple pseudo random number generator based on `XORSHIFT+`, which has 64-bit seed, 128 bits of state, and full
  //! period `2^128 - 1`.
  //!
  //! Based on a paper by Sebastiano Vigna:
  //!   http://vigna.di.unimi.it/ftp/papers/xorshiftplus.pdf
  _BLRandom = record
    //! PRNG state.
    data: array [0..1] of UInt64;
  end;

  //! Blend2D build information.
  _BLRuntimeBuildInfo = record
    //! Major version number.
    majorVersion: UInt32;
    //! Minor version number.
    minorVersion: UInt32;
    //! Patch version number.
    patchVersion: UInt32;
    //! Blend2D build type, see \ref BLRuntimeBuildType.
    buildType: UInt32;
    //! Baseline CPU features, see \ref BLRuntimeCpuFeatures.
      //!
      //! These features describe CPU features that were detected at compile-time. Baseline features are used to compile
      //! all source files so they represent the minimum feature-set the target CPU must support to run Blend2D.
      //!
      //! Official Blend2D builds set baseline at SSE2 on X86 target and NEON on ARM target. Custom builds can set use
      //! a different baseline, which can be read through `BLRuntimeBuildInfo`.
    baselineCpuFeatures: UInt32;
    //! Supported CPU features, see \ref BLRuntimeCpuFeatures.
      //!
      //! These features do not represent the features that the host CPU must support, instead, they represent all features
      //! that Blend2D can take advantage of in C++ code that uses instruction intrinsics. For example if AVX2 is part of
      //! `supportedCpuFeatures` it means that Blend2D can take advantage of it if there is a specialized code-path.
    supportedCpuFeatures: UInt32;
    //! Maximum size of an image (both width and height).
    maxImageSize: UInt32;
    //! Maximum number of threads for asynchronous operations, including rendering.
    maxThreadCount: UInt32;
    //! Reserved, must be zero.
    reserved: array [0..1] of UInt32;
    //! Identification of the C++ compiler used to build Blend2D.
    compilerInfo: array [0..31] of UTF8Char;
  end;

  //! System information queried by the runtime.
  _BLRuntimeSystemInfo = record
    //! Host CPU architecture, see \ref BLRuntimeCpuArch.
    cpuArch: UInt32;
    //! Host CPU features, see \ref BLRuntimeCpuFeatures.
    cpuFeatures: UInt32;
    //! Number of cores of the host CPU/CPUs.
    coreCount: UInt32;
    //! Number of threads of the host CPU/CPUs.
    threadCount: UInt32;
    //! Minimum stack size of a worker thread used by Blend2D.
    threadStackSize: UInt32;
    //! Removed field.
    removed: UInt32;
    //! Allocation granularity of virtual memory (includes thread's stack).
    allocationGranularity: UInt32;
    //! Reserved for future use.
    reserved: array [0..4] of UInt32;
    //! Host CPU vendor string such "AMD", "APPLE", "INTEL", "SAMSUNG", etc...
    cpuVendor: array [0..15] of UTF8Char;
    //! Host CPU brand string or empty string if not detected properly.
    cpuBrand: array [0..63] of UTF8Char;
  end;

  //! Provides information about resources allocated by Blend2D.
  _BLRuntimeResourceInfo = record
    //! Virtual memory used at this time.
    vmUsed: NativeUInt;
    //! Virtual memory reserved (allocated internally).
    vmReserved: NativeUInt;
    //! Overhead required to manage virtual memory allocations.
    vmOverhead: NativeUInt;
    //! Number of blocks of virtual memory allocated.
    vmBlockCount: NativeUInt;
    //! Zeroed memory used at this time.
    zmUsed: NativeUInt;
    //! Zeroed memory reserved (allocated internally).
    zmReserved: NativeUInt;
    //! Overhead required to manage zeroed memory allocations.
    zmOverhead: NativeUInt;
    //! Number of blocks of zeroed memory allocated.
    zmBlockCount: NativeUInt;
    //! Count of dynamic pipelines created and cached.
    dynamicPipelineCount: NativeUInt;
    //! Reserved for future use.
    reserved: array [0..6] of NativeUInt;
  end;

  //! Blend2D runtime scope [C API].
  _BLRuntimeScopeCore = record
    data: array [0..1] of UInt32;
  end;

//! This function is called by Blend2D when an internal assertion failure happens.
//!
//! Failing an assertion means that there is either a bug in Blend2D or in user code that uses Blend2D and that the
//! state of the application is already corrupted and thus irrecoverable. Note that this would be a fatal error if
//! this function gets called in production.
procedure _blRuntimeAssertionFailure(const &file: PUTF8Char; line: Integer; const msg: PUTF8Char); cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeAssertionFailure';

function _blObjectAllocImpl(self: _PBLObjectCore; objectInfo: UInt32; implSize: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectAllocImpl';

function _blObjectAllocImplAligned(self: _PBLObjectCore; objectInfo: UInt32; implSize: NativeUInt; implAlignment: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectAllocImplAligned';

function _blObjectAllocImplExternal(self: _PBLObjectCore; objectInfo: UInt32; implSize: NativeUInt; immutable: Boolean; destroyFunc: _BLDestroyExternalDataFunc; userData: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectAllocImplExternal';

function _blObjectFreeImpl(impl: _PBLObjectImpl): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectFreeImpl';

function _blObjectInitMove(self: _PBLUnknown; other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectInitMove';

function _blObjectInitWeak(self: _PBLUnknown; const other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectInitWeak';

function _blObjectReset(self: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectReset';

function _blObjectAssignMove(self: _PBLUnknown; other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectAssignMove';

function _blObjectAssignWeak(self: _PBLUnknown; const other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectAssignWeak';

function _blObjectGetProperty(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: _PBLVarCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetProperty';

function _blObjectGetPropertyBool(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: PBoolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetPropertyBool';

function _blObjectGetPropertyInt32(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: PInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetPropertyInt32';

function _blObjectGetPropertyInt64(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: PInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetPropertyInt64';

function _blObjectGetPropertyUInt32(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: PUInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetPropertyUInt32';

function _blObjectGetPropertyUInt64(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: PUInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetPropertyUInt64';

function _blObjectGetPropertyDouble(const self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; valueOut: PDouble): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectGetPropertyDouble';

function _blObjectSetProperty(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; const value: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetProperty';

function _blObjectSetPropertyBool(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; value: Boolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetPropertyBool';

function _blObjectSetPropertyInt32(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; value: Int32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetPropertyInt32';

function _blObjectSetPropertyInt64(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; value: Int64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetPropertyInt64';

function _blObjectSetPropertyUInt32(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetPropertyUInt32';

function _blObjectSetPropertyUInt64(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; value: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetPropertyUInt64';

function _blObjectSetPropertyDouble(self: _PBLUnknown; const name: PUTF8Char; nameSize: NativeUInt; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blObjectSetPropertyDouble';

//! \endcond
function _blArrayInit(self: _PBLArrayCore; arrayType: _BLObjectType): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInit';

function _blArrayInitMove(self: _PBLArrayCore; other: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInitMove';

function _blArrayInitWeak(self: _PBLArrayCore; const other: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInitWeak';

function _blArrayDestroy(self: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayDestroy';

function _blArrayReset(self: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReset';

function _blArrayGetSize(const self: _PBLArrayCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayGetSize';

function _blArrayGetCapacity(const self: _PBLArrayCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayGetCapacity';

function _blArrayGetItemSize(self: _PBLArrayCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayGetItemSize';

function _blArrayGetData(const self: _PBLArrayCore): Pointer; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayGetData';

function _blArrayClear(self: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayClear';

function _blArrayShrink(self: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayShrink';

function _blArrayReserve(self: _PBLArrayCore; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReserve';

function _blArrayResize(self: _PBLArrayCore; n: NativeUInt; const fill: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayResize';

function _blArrayMakeMutable(self: _PBLArrayCore; dataOut: PPointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayMakeMutable';

function _blArrayModifyOp(self: _PBLArrayCore; op: _BLModifyOp; n: NativeUInt; dataOut: PPointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayModifyOp';

function _blArrayInsertOp(self: _PBLArrayCore; index: NativeUInt; n: NativeUInt; dataOut: PPointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertOp';

function _blArrayAssignMove(self: _PBLArrayCore; other: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAssignMove';

function _blArrayAssignWeak(self: _PBLArrayCore; const other: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAssignWeak';

function _blArrayAssignDeep(self: _PBLArrayCore; const other: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAssignDeep';

function _blArrayAssignData(self: _PBLArrayCore; const data: Pointer; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAssignData';

function _blArrayAssignExternalData(self: _PBLArrayCore; data: Pointer; size: NativeUInt; capacity: NativeUInt; dataAccessFlags: _BLDataAccessFlags; destroyFunc: _BLDestroyExternalDataFunc; userData: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAssignExternalData';

function _blArrayAppendU8(self: _PBLArrayCore; value: UInt8): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendU8';

function _blArrayAppendU16(self: _PBLArrayCore; value: UInt16): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendU16';

function _blArrayAppendU32(self: _PBLArrayCore; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendU32';

function _blArrayAppendU64(self: _PBLArrayCore; value: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendU64';

function _blArrayAppendF32(self: _PBLArrayCore; value: Single): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendF32';

function _blArrayAppendF64(self: _PBLArrayCore; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendF64';

function _blArrayAppendItem(self: _PBLArrayCore; const item: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendItem';

function _blArrayAppendData(self: _PBLArrayCore; const data: Pointer; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayAppendData';

function _blArrayInsertU8(self: _PBLArrayCore; index: NativeUInt; value: UInt8): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertU8';

function _blArrayInsertU16(self: _PBLArrayCore; index: NativeUInt; value: UInt16): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertU16';

function _blArrayInsertU32(self: _PBLArrayCore; index: NativeUInt; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertU32';

function _blArrayInsertU64(self: _PBLArrayCore; index: NativeUInt; value: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertU64';

function _blArrayInsertF32(self: _PBLArrayCore; index: NativeUInt; value: Single): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertF32';

function _blArrayInsertF64(self: _PBLArrayCore; index: NativeUInt; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertF64';

function _blArrayInsertItem(self: _PBLArrayCore; index: NativeUInt; const item: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertItem';

function _blArrayInsertData(self: _PBLArrayCore; index: NativeUInt; const data: Pointer; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayInsertData';

function _blArrayReplaceU8(self: _PBLArrayCore; index: NativeUInt; value: UInt8): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceU8';

function _blArrayReplaceU16(self: _PBLArrayCore; index: NativeUInt; value: UInt16): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceU16';

function _blArrayReplaceU32(self: _PBLArrayCore; index: NativeUInt; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceU32';

function _blArrayReplaceU64(self: _PBLArrayCore; index: NativeUInt; value: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceU64';

function _blArrayReplaceF32(self: _PBLArrayCore; index: NativeUInt; value: Single): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceF32';

function _blArrayReplaceF64(self: _PBLArrayCore; index: NativeUInt; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceF64';

function _blArrayReplaceItem(self: _PBLArrayCore; index: NativeUInt; const item: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceItem';

function _blArrayReplaceData(self: _PBLArrayCore; rStart: NativeUInt; rEnd: NativeUInt; const data: Pointer; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayReplaceData';

function _blArrayRemoveIndex(self: _PBLArrayCore; index: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayRemoveIndex';

function _blArrayRemoveRange(self: _PBLArrayCore; rStart: NativeUInt; rEnd: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayRemoveRange';

function _blArrayEquals(const a: _PBLArrayCore; const b: _PBLArrayCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blArrayEquals';

//! \endcond
function _blBitArrayInit(self: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayInit';

function _blBitArrayInitMove(self: _PBLBitArrayCore; other: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayInitMove';

function _blBitArrayInitWeak(self: _PBLBitArrayCore; const other: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayInitWeak';

function _blBitArrayDestroy(self: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayDestroy';

function _blBitArrayReset(self: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayReset';

function _blBitArrayAssignMove(self: _PBLBitArrayCore; other: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayAssignMove';

function _blBitArrayAssignWeak(self: _PBLBitArrayCore; const other: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayAssignWeak';

function _blBitArrayAssignWords(self: _PBLBitArrayCore; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayAssignWords';

function _blBitArrayIsEmpty(const self: _PBLBitArrayCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayIsEmpty';

function _blBitArrayGetSize(const self: _PBLBitArrayCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetSize';

function _blBitArrayGetWordCount(const self: _PBLBitArrayCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetWordCount';

function _blBitArrayGetCapacity(const self: _PBLBitArrayCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetCapacity';

function _blBitArrayGetData(const self: _PBLBitArrayCore): _Puint32_t; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetData';

function _blBitArrayGetCardinality(const self: _PBLBitArrayCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetCardinality';

function _blBitArrayGetCardinalityInRange(const self: _PBLBitArrayCore; startBit: UInt32; endBit: UInt32): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetCardinalityInRange';

function _blBitArrayHasBit(const self: _PBLBitArrayCore; bitIndex: UInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayHasBit';

function _blBitArrayHasBitsInRange(const self: _PBLBitArrayCore; startBit: UInt32; endBit: UInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayHasBitsInRange';

function _blBitArraySubsumes(const a: _PBLBitArrayCore; const b: _PBLBitArrayCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArraySubsumes';

function _blBitArrayIntersects(const a: _PBLBitArrayCore; const b: _PBLBitArrayCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayIntersects';

function _blBitArrayGetRange(const self: _PBLBitArrayCore; startOut: PUInt32; endOut: PUInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayGetRange';

function _blBitArrayEquals(const a: _PBLBitArrayCore; const b: _PBLBitArrayCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayEquals';

function _blBitArrayCompare(const a: _PBLBitArrayCore; const b: _PBLBitArrayCore): Integer; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayCompare';

function _blBitArrayClear(self: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayClear';

function _blBitArrayResize(self: _PBLBitArrayCore; nBits: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayResize';

function _blBitArrayReserve(self: _PBLBitArrayCore; nBits: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayReserve';

function _blBitArrayShrink(self: _PBLBitArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayShrink';

function _blBitArraySetBit(self: _PBLBitArrayCore; bitIndex: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArraySetBit';

function _blBitArrayFillRange(self: _PBLBitArrayCore; startBit: UInt32; endBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayFillRange';

function _blBitArrayFillWords(self: _PBLBitArrayCore; bitIndex: UInt32; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayFillWords';

function _blBitArrayClearBit(self: _PBLBitArrayCore; bitIndex: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayClearBit';

function _blBitArrayClearRange(self: _PBLBitArrayCore; startBit: UInt32; endBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayClearRange';

function _blBitArrayClearWord(self: _PBLBitArrayCore; bitIndex: UInt32; wordValue: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayClearWord';

function _blBitArrayClearWords(self: _PBLBitArrayCore; bitIndex: UInt32; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayClearWords';

function _blBitArrayReplaceOp(self: _PBLBitArrayCore; nBits: UInt32; dataOut: PPUInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayReplaceOp';

function _blBitArrayReplaceBit(self: _PBLBitArrayCore; bitIndex: UInt32; bitValue: Boolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayReplaceBit';

function _blBitArrayReplaceWord(self: _PBLBitArrayCore; bitIndex: UInt32; wordValue: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayReplaceWord';

function _blBitArrayReplaceWords(self: _PBLBitArrayCore; bitIndex: UInt32; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayReplaceWords';

function _blBitArrayAppendBit(self: _PBLBitArrayCore; bitValue: Boolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayAppendBit';

function _blBitArrayAppendWord(self: _PBLBitArrayCore; wordValue: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayAppendWord';

function _blBitArrayAppendWords(self: _PBLBitArrayCore; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitArrayAppendWords';

//! \name BLBitSet - C API
//! \{
function _blBitSetInit(self: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetInit';

function _blBitSetInitMove(self: _PBLBitSetCore; other: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetInitMove';

function _blBitSetInitWeak(self: _PBLBitSetCore; const other: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetInitWeak';

function _blBitSetInitRange(self: _PBLBitSetCore; startBit: UInt32; endBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetInitRange';

function _blBitSetDestroy(self: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetDestroy';

function _blBitSetReset(self: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetReset';

function _blBitSetAssignMove(self: _PBLBitSetCore; other: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAssignMove';

function _blBitSetAssignWeak(self: _PBLBitSetCore; const other: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAssignWeak';

function _blBitSetAssignDeep(self: _PBLBitSetCore; const other: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAssignDeep';

function _blBitSetAssignRange(self: _PBLBitSetCore; startBit: UInt32; endBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAssignRange';

function _blBitSetAssignWords(self: _PBLBitSetCore; startWord: UInt32; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAssignWords';

function _blBitSetIsEmpty(const self: _PBLBitSetCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetIsEmpty';

function _blBitSetGetData(const self: _PBLBitSetCore; &out: _PBLBitSetData): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetGetData';

function _blBitSetGetSegmentCount(const self: _PBLBitSetCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetGetSegmentCount';

function _blBitSetGetSegmentCapacity(const self: _PBLBitSetCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetGetSegmentCapacity';

function _blBitSetGetCardinality(const self: _PBLBitSetCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetGetCardinality';

function _blBitSetGetCardinalityInRange(const self: _PBLBitSetCore; startBit: UInt32; endBit: UInt32): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetGetCardinalityInRange';

function _blBitSetHasBit(const self: _PBLBitSetCore; bitIndex: UInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetHasBit';

function _blBitSetHasBitsInRange(const self: _PBLBitSetCore; startBit: UInt32; endBit: UInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetHasBitsInRange';

function _blBitSetSubsumes(const a: _PBLBitSetCore; const b: _PBLBitSetCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetSubsumes';

function _blBitSetIntersects(const a: _PBLBitSetCore; const b: _PBLBitSetCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetIntersects';

function _blBitSetGetRange(const self: _PBLBitSetCore; startOut: PUInt32; endOut: PUInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetGetRange';

function _blBitSetEquals(const a: _PBLBitSetCore; const b: _PBLBitSetCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetEquals';

function _blBitSetCompare(const a: _PBLBitSetCore; const b: _PBLBitSetCore): Integer; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetCompare';

function _blBitSetClear(self: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetClear';

function _blBitSetShrink(self: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetShrink';

function _blBitSetOptimize(self: _PBLBitSetCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetOptimize';

function _blBitSetChop(self: _PBLBitSetCore; startBit: UInt32; endBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetChop';

function _blBitSetAddBit(self: _PBLBitSetCore; bitIndex: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAddBit';

function _blBitSetAddRange(self: _PBLBitSetCore; rangeStartBit: UInt32; rangeEndBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAddRange';

function _blBitSetAddWords(self: _PBLBitSetCore; startWord: UInt32; const wordData: _Puint32_t; wordCount: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetAddWords';

function _blBitSetClearBit(self: _PBLBitSetCore; bitIndex: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetClearBit';

function _blBitSetClearRange(self: _PBLBitSetCore; rangeStartBit: UInt32; rangeEndBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetClearRange';

function _blBitSetBuilderCommit(self: _PBLBitSetCore; builder: _PBLBitSetBuilderCore; newAreaIndex: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetBuilderCommit';

function _blBitSetBuilderAddRange(self: _PBLBitSetCore; builder: _PBLBitSetBuilderCore; startBit: UInt32; endBit: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blBitSetBuilderAddRange';

//! \name BLFile C API Functions
//!
//! File read/write functionality is provided by \ref BLFileCore in C API and wrapped by \ref BLFile in C++ API.
//!
//! \{

//! \endcond
function _blStringInit(self: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInit';

function _blStringInitMove(self: _PBLStringCore; other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInitMove';

function _blStringInitWeak(self: _PBLStringCore; const other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInitWeak';

function _blStringInitWithData(self: _PBLStringCore; const str: PUTF8Char; size: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInitWithData';

function _blStringDestroy(self: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringDestroy';

function _blStringReset(self: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringReset';

function _blStringGetData(const self: _PBLStringCore): PUTF8Char; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringGetData';

function _blStringGetSize(const self: _PBLStringCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringGetSize';

function _blStringGetCapacity(const self: _PBLStringCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringGetCapacity';

function _blStringClear(self: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringClear';

function _blStringShrink(self: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringShrink';

function _blStringReserve(self: _PBLStringCore; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringReserve';

function _blStringResize(self: _PBLStringCore; n: NativeUInt; fill: UTF8Char): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringResize';

function _blStringMakeMutable(self: _PBLStringCore; dataOut: PPUTF8Char): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringMakeMutable';

function _blStringModifyOp(self: _PBLStringCore; op: _BLModifyOp; n: NativeUInt; dataOut: PPUTF8Char): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringModifyOp';

function _blStringInsertOp(self: _PBLStringCore; index: NativeUInt; n: NativeUInt; dataOut: PPUTF8Char): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInsertOp';

function _blStringAssignMove(self: _PBLStringCore; other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringAssignMove';

function _blStringAssignWeak(self: _PBLStringCore; const other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringAssignWeak';

function _blStringAssignDeep(self: _PBLStringCore; const other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringAssignDeep';

function _blStringAssignData(self: _PBLStringCore; const str: PUTF8Char; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringAssignData';

function _blStringApplyOpChar(self: _PBLStringCore; op: _BLModifyOp; c: UTF8Char; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringApplyOpChar';

function _blStringApplyOpData(self: _PBLStringCore; op: _BLModifyOp; const str: PUTF8Char; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringApplyOpData';

function _blStringApplyOpString(self: _PBLStringCore; op: _BLModifyOp; const other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringApplyOpString';

function _blStringApplyOpFormat(self: _PBLStringCore; op: _BLModifyOp; const fmt: PUTF8Char): _BLResult varargs; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringApplyOpFormat';

function _blStringApplyOpFormatV(self: _PBLStringCore; op: _BLModifyOp; const fmt: PUTF8Char; ap: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringApplyOpFormatV';

function _blStringInsertChar(self: _PBLStringCore; index: NativeUInt; c: UTF8Char; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInsertChar';

function _blStringInsertData(self: _PBLStringCore; index: NativeUInt; const str: PUTF8Char; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInsertData';

function _blStringInsertString(self: _PBLStringCore; index: NativeUInt; const other: _PBLStringCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringInsertString';

function _blStringRemoveIndex(self: _PBLStringCore; index: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringRemoveIndex';

function _blStringRemoveRange(self: _PBLStringCore; rStart: NativeUInt; rEnd: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringRemoveRange';

function _blStringEquals(const a: _PBLStringCore; const b: _PBLStringCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringEquals';

function _blStringEqualsData(const self: _PBLStringCore; const str: PUTF8Char; n: NativeUInt): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringEqualsData';

function _blStringCompare(const a: _PBLStringCore; const b: _PBLStringCore): Integer; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringCompare';

function _blStringCompareData(const self: _PBLStringCore; const str: PUTF8Char; n: NativeUInt): Integer; cdecl;
  external _LIB_BLEND2D name _PU + 'blStringCompareData';

//! \endcond

function _blGlyphBufferInit(self: _PBLGlyphBufferCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferInit';

function _blGlyphBufferInitMove(self: _PBLGlyphBufferCore; other: _PBLGlyphBufferCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferInitMove';

function _blGlyphBufferDestroy(self: _PBLGlyphBufferCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferDestroy';

function _blGlyphBufferReset(self: _PBLGlyphBufferCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferReset';

function _blGlyphBufferClear(self: _PBLGlyphBufferCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferClear';

function _blGlyphBufferGetSize(const self: _PBLGlyphBufferCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferGetSize';

function _blGlyphBufferGetFlags(const self: _PBLGlyphBufferCore): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferGetFlags';

function _blGlyphBufferGetGlyphRun(const self: _PBLGlyphBufferCore): _PBLGlyphRun; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferGetGlyphRun';

function _blGlyphBufferGetContent(const self: _PBLGlyphBufferCore): _Puint32_t; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferGetContent';

function _blGlyphBufferGetInfoData(const self: _PBLGlyphBufferCore): _PBLGlyphInfo; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferGetInfoData';

function _blGlyphBufferGetPlacementData(const self: _PBLGlyphBufferCore): _PBLGlyphPlacement; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferGetPlacementData';

function _blGlyphBufferSetText(self: _PBLGlyphBufferCore; const textData: Pointer; size: NativeUInt; encoding: _BLTextEncoding): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferSetText';

function _blGlyphBufferSetGlyphs(self: _PBLGlyphBufferCore; const glyphData: _Puint32_t; size: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferSetGlyphs';

function _blGlyphBufferSetGlyphsFromStruct(self: _PBLGlyphBufferCore; const glyphData: Pointer; size: NativeUInt; glyphIdSize: NativeUInt; glyphIdAdvance: IntPtr): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferSetGlyphsFromStruct';

function _blGlyphBufferSetDebugSink(self: _PBLGlyphBufferCore; sink: _BLDebugMessageSinkFunc; userData: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferSetDebugSink';

function _blGlyphBufferResetDebugSink(self: _PBLGlyphBufferCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGlyphBufferResetDebugSink';


//! \endcond

//! \endcond
function _blFontFeatureSettingsInit(self: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsInit';

function _blFontFeatureSettingsInitMove(self: _PBLFontFeatureSettingsCore; other: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsInitMove';

function _blFontFeatureSettingsInitWeak(self: _PBLFontFeatureSettingsCore; const other: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsInitWeak';

function _blFontFeatureSettingsDestroy(self: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsDestroy';

function _blFontFeatureSettingsReset(self: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsReset';

function _blFontFeatureSettingsClear(self: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsClear';

function _blFontFeatureSettingsShrink(self: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsShrink';

function _blFontFeatureSettingsAssignMove(self: _PBLFontFeatureSettingsCore; other: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsAssignMove';

function _blFontFeatureSettingsAssignWeak(self: _PBLFontFeatureSettingsCore; const other: _PBLFontFeatureSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsAssignWeak';

function _blFontFeatureSettingsGetSize(const self: _PBLFontFeatureSettingsCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsGetSize';

function _blFontFeatureSettingsGetCapacity(const self: _PBLFontFeatureSettingsCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsGetCapacity';

function _blFontFeatureSettingsGetView(const self: _PBLFontFeatureSettingsCore; &out: _PBLFontFeatureSettingsView): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsGetView';

function _blFontFeatureSettingsHasValue(const self: _PBLFontFeatureSettingsCore; featureTag: _BLTag): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsHasValue';

function _blFontFeatureSettingsGetValue(const self: _PBLFontFeatureSettingsCore; featureTag: _BLTag): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsGetValue';

function _blFontFeatureSettingsSetValue(self: _PBLFontFeatureSettingsCore; featureTag: _BLTag; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsSetValue';

function _blFontFeatureSettingsRemoveValue(self: _PBLFontFeatureSettingsCore; featureTag: _BLTag): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsRemoveValue';

function _blFontFeatureSettingsEquals(const a: _PBLFontFeatureSettingsCore; const b: _PBLFontFeatureSettingsCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontFeatureSettingsEquals';

//! \endcond
function _blFontVariationSettingsInit(self: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsInit';

function _blFontVariationSettingsInitMove(self: _PBLFontVariationSettingsCore; other: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsInitMove';

function _blFontVariationSettingsInitWeak(self: _PBLFontVariationSettingsCore; const other: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsInitWeak';

function _blFontVariationSettingsDestroy(self: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsDestroy';

function _blFontVariationSettingsReset(self: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsReset';

function _blFontVariationSettingsClear(self: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsClear';

function _blFontVariationSettingsShrink(self: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsShrink';

function _blFontVariationSettingsAssignMove(self: _PBLFontVariationSettingsCore; other: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsAssignMove';

function _blFontVariationSettingsAssignWeak(self: _PBLFontVariationSettingsCore; const other: _PBLFontVariationSettingsCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsAssignWeak';

function _blFontVariationSettingsGetSize(const self: _PBLFontVariationSettingsCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsGetSize';

function _blFontVariationSettingsGetCapacity(const self: _PBLFontVariationSettingsCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsGetCapacity';

function _blFontVariationSettingsGetView(const self: _PBLFontVariationSettingsCore; &out: _PBLFontVariationSettingsView): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsGetView';

function _blFontVariationSettingsHasValue(const self: _PBLFontVariationSettingsCore; variationTag: _BLTag): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsHasValue';

function _blFontVariationSettingsGetValue(const self: _PBLFontVariationSettingsCore; variationTag: _BLTag): Single; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsGetValue';

function _blFontVariationSettingsSetValue(self: _PBLFontVariationSettingsCore; variationTag: _BLTag; value: Single): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsSetValue';

function _blFontVariationSettingsRemoveValue(self: _PBLFontVariationSettingsCore; variationTag: _BLTag): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsRemoveValue';

function _blFontVariationSettingsEquals(const a: _PBLFontVariationSettingsCore; const b: _PBLFontVariationSettingsCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontVariationSettingsEquals';

//! \endcond

//! \name BLMatrix2D - C API
//!
//! Functions that initialize and manipulate \ref BLMatrix2D content.
//!
//! \{

//! \endcond
function _blGradientInit(self: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientInit';

function _blGradientInitMove(self: _PBLGradientCore; other: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientInitMove';

function _blGradientInitWeak(self: _PBLGradientCore; const other: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientInitWeak';

function _blGradientInitAs(self: _PBLGradientCore; &type: _BLGradientType; const values: Pointer; extendMode: _BLExtendMode; const stops: _PBLGradientStop; n: NativeUInt; const transform: _PBLMatrix2D): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientInitAs';

function _blGradientDestroy(self: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientDestroy';

function _blGradientReset(self: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientReset';

function _blGradientAssignMove(self: _PBLGradientCore; other: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientAssignMove';

function _blGradientAssignWeak(self: _PBLGradientCore; const other: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientAssignWeak';

function _blGradientCreate(self: _PBLGradientCore; &type: _BLGradientType; const values: Pointer; extendMode: _BLExtendMode; const stops: _PBLGradientStop; n: NativeUInt; const transform: _PBLMatrix2D): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientCreate';

function _blGradientShrink(self: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientShrink';

function _blGradientReserve(self: _PBLGradientCore; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientReserve';

function _blGradientGetType(const self: _PBLGradientCore): _BLGradientType; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetType';

function _blGradientSetType(self: _PBLGradientCore; &type: _BLGradientType): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientSetType';

function _blGradientGetExtendMode(const self: _PBLGradientCore): _BLExtendMode; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetExtendMode';

function _blGradientSetExtendMode(self: _PBLGradientCore; extendMode: _BLExtendMode): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientSetExtendMode';

function _blGradientGetValue(const self: _PBLGradientCore; index: NativeUInt): Double; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetValue';

function _blGradientSetValue(self: _PBLGradientCore; index: NativeUInt; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientSetValue';

function _blGradientSetValues(self: _PBLGradientCore; index: NativeUInt; const values: PDouble; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientSetValues';

function _blGradientGetSize(const self: _PBLGradientCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetSize';

function _blGradientGetCapacity(const self: _PBLGradientCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetCapacity';

function _blGradientGetStops(const self: _PBLGradientCore): _PBLGradientStop; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetStops';

function _blGradientResetStops(self: _PBLGradientCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientResetStops';

function _blGradientAssignStops(self: _PBLGradientCore; const stops: _PBLGradientStop; n: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientAssignStops';

function _blGradientAddStopRgba32(self: _PBLGradientCore; offset: Double; argb32: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientAddStopRgba32';

function _blGradientAddStopRgba64(self: _PBLGradientCore; offset: Double; argb64: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientAddStopRgba64';

function _blGradientRemoveStop(self: _PBLGradientCore; index: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientRemoveStop';

function _blGradientRemoveStopByOffset(self: _PBLGradientCore; offset: Double; all: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientRemoveStopByOffset';

function _blGradientRemoveStopsByIndex(self: _PBLGradientCore; rStart: NativeUInt; rEnd: NativeUInt): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientRemoveStopsByIndex';

function _blGradientRemoveStopsByOffset(self: _PBLGradientCore; offsetMin: Double; offsetMax: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientRemoveStopsByOffset';

function _blGradientReplaceStopRgba32(self: _PBLGradientCore; index: NativeUInt; offset: Double; rgba32: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientReplaceStopRgba32';

function _blGradientReplaceStopRgba64(self: _PBLGradientCore; index: NativeUInt; offset: Double; rgba64: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientReplaceStopRgba64';

function _blGradientIndexOfStop(const self: _PBLGradientCore; offset: Double): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientIndexOfStop';

function _blGradientGetTransform(const self: _PBLGradientCore; transformOut: _PBLMatrix2D): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetTransform';

function _blGradientGetTransformType(const self: _PBLGradientCore): _BLTransformType; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientGetTransformType';

function _blGradientApplyTransformOp(self: _PBLGradientCore; opType: _BLTransformOp; const opData: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientApplyTransformOp';

function _blGradientEquals(const a: _PBLGradientCore; const b: _PBLGradientCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blGradientEquals';

//! \name BLFormat - C API
//! \{

//! \endcond

//! \endcond

//! \endcond
function _blPatternInit(self: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternInit';

function _blPatternInitMove(self: _PBLPatternCore; other: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternInitMove';

function _blPatternInitWeak(self: _PBLPatternCore; const other: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternInitWeak';

function _blPatternInitAs(self: _PBLPatternCore; const image: _PBLImageCore; const area: _PBLRectI; extendMode: _BLExtendMode; const transform: _PBLMatrix2D): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternInitAs';

function _blPatternDestroy(self: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternDestroy';

function _blPatternReset(self: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternReset';

function _blPatternAssignMove(self: _PBLPatternCore; other: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternAssignMove';

function _blPatternAssignWeak(self: _PBLPatternCore; const other: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternAssignWeak';

function _blPatternAssignDeep(self: _PBLPatternCore; const other: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternAssignDeep';

function _blPatternCreate(self: _PBLPatternCore; const image: _PBLImageCore; const area: _PBLRectI; extendMode: _BLExtendMode; const transform: _PBLMatrix2D): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternCreate';

function _blPatternGetImage(const self: _PBLPatternCore; image: _PBLImageCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternGetImage';

function _blPatternSetImage(self: _PBLPatternCore; const image: _PBLImageCore; const area: _PBLRectI): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternSetImage';

function _blPatternResetImage(self: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternResetImage';

function _blPatternGetArea(const self: _PBLPatternCore; areaOut: _PBLRectI): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternGetArea';

function _blPatternSetArea(self: _PBLPatternCore; const area: _PBLRectI): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternSetArea';

function _blPatternResetArea(self: _PBLPatternCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternResetArea';

function _blPatternGetExtendMode(const self: _PBLPatternCore): _BLExtendMode; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternGetExtendMode';

function _blPatternSetExtendMode(self: _PBLPatternCore; extendMode: _BLExtendMode): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternSetExtendMode';

function _blPatternGetTransform(const self: _PBLPatternCore; transformOut: _PBLMatrix2D): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternGetTransform';

function _blPatternGetTransformType(const self: _PBLPatternCore): _BLTransformType; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternGetTransformType';

function _blPatternApplyTransformOp(self: _PBLPatternCore; opType: _BLTransformOp; const opData: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternApplyTransformOp';

function _blPatternEquals(const a: _PBLPatternCore; const b: _PBLPatternCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blPatternEquals';

function _blVarInitType(self: _PBLUnknown; &type: _BLObjectType): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitType';

function _blVarInitNull(self: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitNull';

function _blVarInitBool(self: _PBLUnknown; value: Boolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitBool';

function _blVarInitInt32(self: _PBLUnknown; value: Int32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitInt32';

function _blVarInitInt64(self: _PBLUnknown; value: Int64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitInt64';

function _blVarInitUInt32(self: _PBLUnknown; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitUInt32';

function _blVarInitUInt64(self: _PBLUnknown; value: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitUInt64';

function _blVarInitDouble(self: _PBLUnknown; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitDouble';

function _blVarInitRgba(self: _PBLUnknown; const rgba: _PBLRgba): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitRgba';

function _blVarInitRgba32(self: _PBLUnknown; rgba32: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitRgba32';

function _blVarInitRgba64(self: _PBLUnknown; rgba64: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitRgba64';

function _blVarInitMove(self: _PBLUnknown; other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitMove';

function _blVarInitWeak(self: _PBLUnknown; const other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarInitWeak';

function _blVarDestroy(self: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarDestroy';

function _blVarReset(self: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarReset';

function _blVarAssignNull(self: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignNull';

function _blVarAssignBool(self: _PBLUnknown; value: Boolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignBool';

function _blVarAssignInt32(self: _PBLUnknown; value: Int32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignInt32';

function _blVarAssignInt64(self: _PBLUnknown; value: Int64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignInt64';

function _blVarAssignUInt32(self: _PBLUnknown; value: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignUInt32';

function _blVarAssignUInt64(self: _PBLUnknown; value: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignUInt64';

function _blVarAssignDouble(self: _PBLUnknown; value: Double): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignDouble';

function _blVarAssignRgba(self: _PBLUnknown; const rgba: _PBLRgba): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignRgba';

function _blVarAssignRgba32(self: _PBLUnknown; rgba32: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignRgba32';

function _blVarAssignRgba64(self: _PBLUnknown; rgba64: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignRgba64';

function _blVarAssignMove(self: _PBLUnknown; other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignMove';

function _blVarAssignWeak(self: _PBLUnknown; const other: _PBLUnknown): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarAssignWeak';

function _blVarGetType(const self: _PBLUnknown): _BLObjectType; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarGetType';

function _blVarToBool(const self: _PBLUnknown; &out: PBoolean): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToBool';

function _blVarToInt32(const self: _PBLUnknown; &out: PInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToInt32';

function _blVarToInt64(const self: _PBLUnknown; &out: PInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToInt64';

function _blVarToUInt32(const self: _PBLUnknown; &out: PUInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToUInt32';

function _blVarToUInt64(const self: _PBLUnknown; &out: PUInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToUInt64';

function _blVarToDouble(const self: _PBLUnknown; &out: PDouble): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToDouble';

function _blVarToRgba(const self: _PBLUnknown; &out: _PBLRgba): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToRgba';

function _blVarToRgba32(const self: _PBLUnknown; &out: PUInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToRgba32';

function _blVarToRgba64(const self: _PBLUnknown; &out: PUInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarToRgba64';

function _blVarEquals(const a: _PBLUnknown; const b: _PBLUnknown): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEquals';

function _blVarEqualsNull(const self: _PBLUnknown): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsNull';

function _blVarEqualsBool(const self: _PBLUnknown; value: Boolean): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsBool';

function _blVarEqualsInt64(const self: _PBLUnknown; value: Int64): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsInt64';

function _blVarEqualsUInt64(const self: _PBLUnknown; value: UInt64): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsUInt64';

function _blVarEqualsDouble(const self: _PBLUnknown; value: Double): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsDouble';

function _blVarEqualsRgba(const self: _PBLUnknown; const rgba: _PBLRgba): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsRgba';

function _blVarEqualsRgba32(const self: _PBLUnknown; rgba32: UInt32): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsRgba32';

function _blVarEqualsRgba64(const self: _PBLUnknown; rgba64: UInt64): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarEqualsRgba64';

function _blVarStrictEquals(const a: _PBLUnknown; const b: _PBLUnknown): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blVarStrictEquals';

//! \endcond

//! \endcond
function _blFontManagerInit(self: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerInit';

function _blFontManagerInitMove(self: _PBLFontManagerCore; other: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerInitMove';

function _blFontManagerInitWeak(self: _PBLFontManagerCore; const other: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerInitWeak';

function _blFontManagerInitNew(self: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerInitNew';

function _blFontManagerDestroy(self: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerDestroy';

function _blFontManagerReset(self: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerReset';

function _blFontManagerAssignMove(self: _PBLFontManagerCore; other: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerAssignMove';

function _blFontManagerAssignWeak(self: _PBLFontManagerCore; const other: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerAssignWeak';

function _blFontManagerCreate(self: _PBLFontManagerCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerCreate';

function _blFontManagerGetFaceCount(const self: _PBLFontManagerCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerGetFaceCount';

function _blFontManagerGetFamilyCount(const self: _PBLFontManagerCore): NativeUInt; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerGetFamilyCount';

function _blFontManagerHasFace(const self: _PBLFontManagerCore; const face: _PBLFontFaceCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerHasFace';

function _blFontManagerAddFace(self: _PBLFontManagerCore; const face: _PBLFontFaceCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerAddFace';

function _blFontManagerQueryFace(const self: _PBLFontManagerCore; const name: PUTF8Char; nameSize: NativeUInt; const properties: _PBLFontQueryProperties; &out: _PBLFontFaceCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerQueryFace';

function _blFontManagerQueryFacesByFamilyName(const self: _PBLFontManagerCore; const name: PUTF8Char; nameSize: NativeUInt; &out: _PBLArrayCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerQueryFacesByFamilyName';

function _blFontManagerEquals(const a: _PBLFontManagerCore; const b: _PBLFontManagerCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blFontManagerEquals';

//! \endcond

//! \endcond

function _blPixelConverterInit(self: _PBLPixelConverterCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterInit';

function _blPixelConverterInitWeak(self: _PBLPixelConverterCore; const other: _PBLPixelConverterCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterInitWeak';

function _blPixelConverterDestroy(self: _PBLPixelConverterCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterDestroy';

function _blPixelConverterReset(self: _PBLPixelConverterCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterReset';

function _blPixelConverterAssign(self: _PBLPixelConverterCore; const other: _PBLPixelConverterCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterAssign';

function _blPixelConverterCreate(self: _PBLPixelConverterCore; const dstInfo: _PBLFormatInfo; const srcInfo: _PBLFormatInfo; createFlags: _BLPixelConverterCreateFlags): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterCreate';

function _blPixelConverterConvert(const self: _PBLPixelConverterCore; dstData: Pointer; dstStride: IntPtr; const srcData: Pointer; srcStride: IntPtr; w: UInt32; h: UInt32; const options: _PBLPixelConverterOptions): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blPixelConverterConvert';

//! \name BLRandom - C API
//! \{
function _blRandomReset(self: _PBLRandom; seed: UInt64): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRandomReset';

function _blRandomNextUInt32(self: _PBLRandom): UInt32; cdecl;
  external _LIB_BLEND2D name _PU + 'blRandomNextUInt32';

function _blRandomNextUInt64(self: _PBLRandom): UInt64; cdecl;
  external _LIB_BLEND2D name _PU + 'blRandomNextUInt64';

function _blRandomNextDouble(self: _PBLRandom): Double; cdecl;
  external _LIB_BLEND2D name _PU + 'blRandomNextDouble';

//! Initialized Blend2D runtime
function _blRuntimeInit(): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeInit';

//! Shuts down Blend2D runtime
function _blRuntimeShutdown(): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeShutdown';

function _blRuntimeCleanup(cleanupFlags: _BLRuntimeCleanupFlags): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeCleanup';

function _blRuntimeQueryInfo(infoType: _BLRuntimeInfoType; infoOut: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeQueryInfo';

function _blRuntimeMessageOut(const msg: PUTF8Char): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeMessageOut';

function _blRuntimeMessageFmt(const fmt: PUTF8Char): _BLResult varargs; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeMessageFmt';

function _blRuntimeMessageVFmt(const fmt: PUTF8Char; ap: Pointer): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeMessageVFmt';

function _blResultFromWinError(e: UInt32): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blResultFromWinError';

function _blRuntimeScopeBegin(self: _PBLRuntimeScopeCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeScopeBegin';

function _blRuntimeScopeEnd(self: _PBLRuntimeScopeCore): _BLResult; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeScopeEnd';

function _blRuntimeScopeIsActive(const self: _PBLRuntimeScopeCore): Boolean; cdecl;
  external _LIB_BLEND2D name _PU + 'blRuntimeScopeIsActive';

implementation

end.
